from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton, InputFile
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import CommandStart
from utils.database import get_user, add_cv
from keyboards.cv_kb import get_cv_type_kb
from keyboards.main_menu_kb import main_menu_kb
from PIL import Image, ImageDraw, ImageFont
import os
import textwrap
from aiogram.types import BufferedInputFile

cv_router = Router()


class CVStates(StatesGroup):
    position = State()
    languages = State()
    education = State()
    experience = State()
    skills = State()
    contacts = State()
    about = State()
    confirmation = State()


@cv_router.message(F.text == "üìÇ CV")
async def start_cv_menu(message: types.Message):
    await message.answer(
        "–ö–æ–º–ø–∞–Ω—ñ—ó —à—É–∫–∞—é—Ç—å —Ä—ñ–∑–Ω–∏—Ö —Å–ø–µ—Ü—ñ–∞–ª—ñ—Å—Ç—ñ–≤ —Å–∞–º–µ —Å–µ—Ä–µ–¥ —É—á–∞—Å–Ω–∏–∫—ñ–≤ –Ø—Ä–º–∞—Ä–∫—É!\n"
        "–¢–æ–∂ –∑–∞–≤–∞–Ω—Ç–∞–∂—É–π —Å–≤–æ—î —Ä–µ–∑—é–º–µ —É —Ñ–æ—Ä–º–∞—Ç—ñ PDF –∞–±–æ —Å—Ç–≤–æ—Ä–∏ –π–æ–≥–æ —Ç—É—Ç –∑–∞ –∫—ñ–ª—å–∫–∞ —Ö–≤–∏–ª–∏–Ω!",
        reply_markup=get_cv_type_kb()
    )


@cv_router.message(F.text == "üìÇ –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ CV")
async def ask_cv_file(message: types.Message):
    await message.answer(
        "–ó–∞–≤–∞–Ω—Ç–∞–∂ —Å–≤–æ—î CV —É —Ñ–æ—Ä–º–∞—Ç—ñ PDF, —ñ –º–∏ –∑–±–µ—Ä–µ–∂–µ–º–æ –π–æ–≥–æ –¥–ª—è —Ç–µ–±–µ!",
        reply_markup=ReplyKeyboardRemove()
    )


@cv_router.message(F.document)
async def handle_cv_file(message: types.Message):
    if message.document.mime_type != "application/pdf":
        await message.answer("‚ùó –¶–µ –Ω–µ PDF. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.")
        return

    file_id = message.document.file_id
    await add_cv(message.from_user.id, cv_file_path=file_id)
    await message.answer("‚úÖ CV –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ! üéâ", reply_markup=main_menu_kb())


@cv_router.message(F.text == "üìù –°—Ç–≤–æ—Ä–∏—Ç–∏ CV")
async def cmd_start(message: types.Message, state: FSMContext):
    await state.clear()
    await state.set_state(CVStates.position)
    await message.answer("–Ø–∫–∞ –ø–æ—Å–∞–¥–∞ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å?", reply_markup=ReplyKeyboardRemove())


@cv_router.message(CVStates.position)
async def process_position(message: types.Message, state: FSMContext):
    await state.update_data(position=message.text)
    await state.set_state(CVStates.languages)
    await message.answer("–Ø–∫—ñ –º–æ–≤–∏ –≤–∏ –∑–Ω–∞—î—Ç–µ?")


@cv_router.message(CVStates.languages)
async def process_languages(message: types.Message, state: FSMContext):
    await state.update_data(languages=message.text)
    await state.set_state(CVStates.about)
    await message.answer("–ü–∞—Ä—É —Å–ª—ñ–≤ –ø—Ä–æ –≤–∞—Å")

@cv_router.message(CVStates.about)
async def process_languages(message: types.Message, state: FSMContext):
    await state.update_data(about=message.text)
    await state.set_state(CVStates.education)
    await message.answer("–í–∞—à–∞ –æ—Å–≤—ñ—Ç–∞?")


@cv_router.message(CVStates.education)
async def process_education(message: types.Message, state: FSMContext):
    await state.update_data(education=message.text)
    await state.set_state(CVStates.experience)
    await message.answer("–í–∞—à –¥–æ—Å–≤—ñ–¥ —Ä–æ–±–æ—Ç–∏?")


@cv_router.message(CVStates.experience)
async def process_experience(message: types.Message, state: FSMContext):
    await state.update_data(experience=message.text)
    await state.set_state(CVStates.skills)
    await message.answer("–í–∞—à—ñ –Ω–∞–≤–∏—á–∫–∏?")


@cv_router.message(CVStates.skills)
async def process_skills(message: types.Message, state: FSMContext):
    await state.update_data(skills=message.text)
    await state.set_state(CVStates.contacts)
    await message.answer("–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è?")


@cv_router.message(CVStates.contacts)
async def process_contacts(message: types.Message, state: FSMContext):
    await state.update_data(contacts=message.text)
    data = await state.get_data()

    user = await get_user(message.from_user.id)
    user_name = user.get("name", "") if user else "–ù–µ–≤—ñ–¥–æ–º–æ"

    summary = (
        f"–Ü–º'—è: {user_name}\n"
        f"–ü–æ—Å–∞–¥–∞: {data['position']}\n"
        f"–ú–æ–≤–∏: {data['languages']}\n"
        f"–û—Å–≤—ñ—Ç–∞: {data['education']}\n"
        f"–î–æ—Å–≤—ñ–¥: {data['experience']}\n"
        f"–ù–∞–≤–∏—á–∫–∏: {data['skills']}\n"
        f"–ö–æ–Ω—Ç–∞–∫—Ç–∏: {data['contacts']}\n\n"
        "–í—Å–µ –≤—ñ—Ä–Ω–æ?"
    )

    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–¢–∞–∫"), KeyboardButton(text="–ù—ñ")]],
        resize_keyboard=True
    )
    await message.answer(summary, reply_markup=keyboard)
    await state.set_state(CVStates.confirmation)

from utils.database import get_user, add_cv

@cv_router.message(CVStates.confirmation, F.text.casefold() == "—Ç–∞–∫")
async def process_confirm_yes(message: types.Message, state: FSMContext):
    data = await state.get_data()
    try:
        user = await get_user(message.from_user.id)
        user_name = user.get("name", "") if user else ""
    except Exception as e:
        print(f"Error getting user: {e}")
        user_name = ""
    template_path = "templates/cv_template.png"
    if not os.path.exists(template_path):
        await message.answer("‚ö†Ô∏è –®–∞–±–ª–æ–Ω CV –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ, —á–∏ —Ñ–∞–π–ª 'cv_template.png' —ñ—Å–Ω—É—î –≤ –ø–∞–ø—Ü—ñ 'templates'.")
        return

    image = Image.open("templates/cv_template.png").convert("RGB")
    draw = ImageDraw.Draw(image)
    font_text = ImageFont.truetype("fonts/Nunito-Regular.ttf", 14)
    font_title = ImageFont.truetype("fonts/Exo2-Regular.ttf", 36)

    def draw_wrapped_text(draw, text, font, fill, x, y, max_width):
        lines = textwrap.wrap(text, width=max_width)
        line_height = font.getbbox("A")[1] 
        for line in lines:
            draw.text((x, y), line, font=font, fill=fill)
            y += line_height 

    draw_wrapped_text(draw, f"{user_name}", font=font_title, fill="#111A94", x=200, y=70, max_width=40)
    draw_wrapped_text(draw, f"–û—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ—Å–∞–¥–∞:\n {data['position']}", font=font_text, fill="#111A94", x=200, y=120, max_width=80)
    draw_wrapped_text(draw, f"–í–æ–ª–æ–¥—ñ–Ω–Ω—è –º–æ–≤–∞–º–∏:\n{data['languages']}", font=font_text, fill="#111A94", x=200, y=210, max_width=80)
    draw_wrapped_text(draw, f"–û—Å–≤—ñ—Ç–∞:\n{data['education']}", font=font_text, fill="#111A94", x=200, y=270, max_width=80)
    draw_wrapped_text(draw, f"–î–æ—Å–≤—ñ–¥:\n{data['experience']}", font=font_text, fill="#111A94", x=200, y=330, max_width=80)
    draw_wrapped_text(draw, f"–ù–∞–≤–∏—á–∫–∏:\n{data['skills']}", font=font_text, fill="#111A94", x=200, y=390, max_width=80)
    draw_wrapped_text(draw, f"–ü—Ä–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞:\n{data['about']}", font=font_text, fill="#111A94", x=200, y=450, max_width=80)
    draw_wrapped_text(draw, f"–ö–æ–Ω—Ç–∞–∫—Ç–∏:\n{data['contacts']}", font=font_text, fill="#111A94", x=200, y=530, max_width=80)

    pdf_path = f"cv_{message.from_user.id}.pdf"
    image.save(pdf_path, "PDF")

    with open(pdf_path, "rb") as pdf_file:
        file_bytes = pdf_file.read()
        document = BufferedInputFile(file=file_bytes, filename=f"CV_{message.from_user.id}.pdf")
        doc = await message.answer_document(document)
        file_id = doc.document.file_id


    await add_cv(message.from_user.id, cv_file_path=file_id) 

    os.remove(pdf_path)

    await message.answer("‚úÖ CV –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ!", reply_markup=main_menu_kb())
    await state.clear()

@cv_router.message(CVStates.confirmation, F.text.casefold() == "–Ω—ñ")
async def process_confirm_no(message: types.Message, state: FSMContext):
    await state.clear()
    await state.set_state(CVStates.position)
    await message.answer("–î–æ–±—Ä–µ, –¥–∞–≤–∞–π —Å–ø—Ä–æ–±—É—î–º–æ —â–µ —Ä–∞–∑. –Ø–∫–∞ –ø–æ—Å–∞–¥–∞ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å?", reply_markup=ReplyKeyboardRemove())


@cv_router.message(F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def back_to_menu(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é!", reply_markup=main_menu_kb())
