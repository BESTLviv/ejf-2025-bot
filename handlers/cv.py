from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton
from utils.database import add_cv
from keyboards.cv_kb import get_cv_type_kb
from states.cv import CVForm

router = Router()

@router.message(F.text == "üìÇ CV")
async def start_cv_menu(message: types.Message):
    await message.answer(
        "–ö–æ–º–ø–∞–Ω—ñ—ó —à—É–∫–∞—é—Ç—å —Ä—ñ–∑–Ω–∏—Ö —Å–ø–µ—Ü—ñ–∞–ª—ñ—Å—Ç—ñ–≤ —Å–∞–º–µ —Å–µ—Ä–µ–¥ —É—á–∞—Å–Ω–∏–∫—ñ–≤ –Ø—Ä–º–∞—Ä–∫—É!\n"
        "–¢–æ–∂ –∑–∞–≤–∞–Ω—Ç–∞–∂—É–π —Å–≤–æ—î —Ä–µ–∑—é–º–µ —É —Ñ–æ—Ä–º–∞—Ç—ñ PDF —Ç–∞ —á–µ–∫–∞–π –¥–∑–≤—ñ–Ω–æ—á–∫–∞!\n\n"
        "–ù–µ –º–∞—î—à CV? –Ø –¥–æ–ø–æ–º–æ–∂—É ‚Äì –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–π –Ω–∞ –¥–µ–∫—ñ–ª—å–∫–∞ –∑–∞–ø–∏—Ç–∞–Ω—å, —ñ –∑–∞ –∫—ñ–ª—å–∫–∞ —Ö–≤–∏–ª–∏–Ω –º–∞—Ç–∏–º–µ—à –≥–æ—Ç–æ–≤–µ —Ä–µ–∑—é–º–µ!",
        reply_markup=get_cv_type_kb()
    )

@router.message(F.document)
async def handle_cv_file(message: types.Message):
    if message.document.mime_type != "application/pdf":
        await message.answer("‚ùó–£–ø—Å, —Å—Ö–æ–∂–µ, —â–æ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª—É –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ PDF")
        return

    file_id = message.document.file_id
    await add_cv(message.from_user.id, cv_file_path=file_id)
    await message.answer("‚úÖ CV –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ! –¢–∏ –∫—Ä–∞—Å–µ–Ω—å! üéâ")

@router.message(F.text == "üìù –°—Ç–≤–æ—Ä–∏—Ç–∏ CV")
async def start_cv_form(message: types.Message, state: FSMContext):
    await message.answer("–ü–æ—á–Ω–µ–º–æ –∑ –æ—Å–Ω–æ–≤–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó:\nüîπ –í–∞—à–µ –ø–æ–≤–Ω–µ —ñ–º‚Äô—è")
    await state.set_state(CVForm.full_name)

@router.message(CVForm.full_name)
async def ask_phone(message: types.Message, state: FSMContext):
    await state.update_data(full_name=message.text)
    await message.answer("üîπ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É")
    await state.set_state(CVForm.phone)

@router.message(CVForm.phone)
async def ask_email(message: types.Message, state: FSMContext):
    await state.update_data(phone=message.text)
    await message.answer("üîπ –ï–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞ –ø–æ—à—Ç–∞")
    await state.set_state(CVForm.email)

@router.message(CVForm.email)
async def ask_city(message: types.Message, state: FSMContext):
    await state.update_data(email=message.text)
    await message.answer("üîπ –ú—ñ—Å—Ç–æ –ø—Ä–æ–∂–∏–≤–∞–Ω–Ω—è")
    await state.set_state(CVForm.city)

@router.message(CVForm.city)
async def ask_position(message: types.Message, state: FSMContext):
    await state.update_data(city=message.text)
    await message.answer("üîπ –Ø–∫—É –ø–æ—Å–∞–¥—É –∞–±–æ —Å—Ñ–µ—Ä—É —Ä–æ–±–æ—Ç–∏ –≤–∏ —à—É–∫–∞—î—Ç–µ?")
    await state.set_state(CVForm.position)


@router.message(CVForm.position)
async def ask_education(message: types.Message, state: FSMContext):
    await state.update_data(position=message.text)
    await message.answer("üéì –ù–∞–∑–≤–∞ –Ω–∞–≤—á–∞–ª—å–Ω–æ–≥–æ –∑–∞–∫–ª–∞–¥—É")
    await state.set_state(CVForm.education)

@router.message(CVForm.education)
async def ask_speciality(message: types.Message, state: FSMContext):
    await state.update_data(education=message.text)
    await message.answer("üìò –°–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ—Å—Ç—å")
    await state.set_state(CVForm.speciality)

@router.message(CVForm.speciality)
async def ask_education_years(message: types.Message, state: FSMContext):
    await state.update_data(speciality=message.text)
    await message.answer("üìÖ –†–æ–∫–∏ –Ω–∞–≤—á–∞–Ω–Ω—è (–≤—ñ–¥ - –¥–æ)")
    await state.set_state(CVForm.education_years)

@router.message(CVForm.education_years)
async def ask_certifications(message: types.Message, state: FSMContext):
    await state.update_data(education_years=message.text)
    await message.answer("‚úÖ –î–æ–¥–∞—Ç–∫–æ–≤—ñ —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç–∏ / –∫—É—Ä—Å–∏ (—è–∫—â–æ –º–∞—î—Ç–µ)")
    await state.set_state(CVForm.certifications)


@router.message(CVForm.certifications)
async def ask_company(message: types.Message, state: FSMContext):
    await state.update_data(certifications=message.text)
    await message.answer("üíº –ù–∞–∑–≤–∞ –∫–æ–º–ø–∞–Ω—ñ—ó (—è–∫—â–æ —î –¥–æ—Å–≤—ñ–¥)")
    await state.set_state(CVForm.company)

@router.message(CVForm.company)
async def ask_job_title(message: types.Message, state: FSMContext):
    await state.update_data(company=message.text)
    await message.answer("üîπ –ü–æ—Å–∞–¥–∞")
    await state.set_state(CVForm.job_title)

@router.message(CVForm.job_title)
async def ask_job_years(message: types.Message, state: FSMContext):
    await state.update_data(job_title=message.text)
    await message.answer("üîπ –†–æ–∫–∏ —Ä–æ–±–æ—Ç–∏")
    await state.set_state(CVForm.job_years)

@router.message(CVForm.job_years)
async def ask_job_duties(message: types.Message, state: FSMContext):
    await state.update_data(job_years=message.text)
    await message.answer("üîπ –û—Å–Ω–æ–≤–Ω—ñ –æ–±–æ–≤‚Äô—è–∑–∫–∏ –Ω–∞ —Ä–æ–±–æ—Ç—ñ")
    await state.set_state(CVForm.job_duties)


@router.message(CVForm.job_duties)
async def ask_tools(message: types.Message, state: FSMContext):
    await state.update_data(job_duties=message.text)
    await message.answer("üõ†Ô∏è –Ø–∫–∏–º–∏ –ø—Ä–æ–≥—Ä–∞–º–∞–º–∏ –∞–±–æ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏ –≤–º—ñ—î—Ç–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è?")
    await state.set_state(CVForm.tools)

@router.message(CVForm.tools)
async def ask_languages(message: types.Message, state: FSMContext):
    await state.update_data(tools=message.text)
    await message.answer("üåê –ó–Ω–∞–Ω–Ω—è –º–æ–≤ (—è–∫—ñ —ñ –Ω–∞ —è–∫–æ–º—É —Ä—ñ–≤–Ω—ñ)")
    await state.set_state(CVForm.languages)

@router.message(CVForm.languages)
async def ask_other_skills(message: types.Message, state: FSMContext):
    await state.update_data(languages=message.text)
    await message.answer("ü§π‚Äç‚ôÇÔ∏è –Ø–∫—ñ —â–µ –∫–æ—Ä–∏—Å–Ω—ñ –Ω–∞–≤–∏—á–∫–∏ –º–∞—î—Ç–µ?")
    await state.set_state(CVForm.other_skills)


@router.message(CVForm.other_skills)
async def ask_about(message: types.Message, state: FSMContext):
    await state.update_data(other_skills=message.text)
    await message.answer("üë§ –û–ø–∏—à—ñ—Ç—å —Å–µ–±–µ —è–∫ –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞")
    await state.set_state(CVForm.about)

@router.message(CVForm.about)
async def ask_schedule(message: types.Message, state: FSMContext):
    await state.update_data(about=message.text)
    await message.answer("‚è∞ –Ø–∫–∏–π –≥—Ä–∞—Ñ—ñ–∫ –≤–∞–º –ø—ñ–¥—Ö–æ–¥–∏—Ç—å?")
    await state.set_state(CVForm.schedule)

@router.message(CVForm.schedule)
async def confirm_cv(message: types.Message, state: FSMContext):
    await state.update_data(schedule=message.text)
    data = await state.get_data()

    summary = "\n".join([f"‚Ä¢ {key}: {value}" for key, value in data.items()])
    await message.answer(f"–û—Å—å —â–æ —Ç–∏ –∑–∞–ø–æ–≤–Ω–∏–≤(–ª–∞):\n\n{summary}\n\n–í—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ? (–¢–∞–∫ / –ù—ñ)")
    await state.set_state(CVForm.confirm)
def confirmation_kb():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–¢–∞–∫", callback_data="yes")],
            [InlineKeyboardButton(text="–ù—ñ", callback_data="no")]
        ]
    )

@router.message(CVForm.confirm)
async def handle_confirmation(message: types.Message, state: FSMContext):
    await message.answer(
        "–¢–∏ –≤–ø–µ–≤–Ω–µ–Ω–∏–π(–∞), —â–æ —Ö–æ—á–µ—à –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —Å–≤–æ—î CV –∑ —Ü—ñ—î—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó?\n"
        "–Ø–∫—â–æ —Ç–∞–∫, –Ω–∞—Ç–∏—Å–Ω–∏ '–¢–∞–∫', —è–∫—â–æ —Ö–æ—á–µ—à –ø–æ—á–∞—Ç–∏ —Å–ø–æ—á–∞—Ç–∫—É, –Ω–∞—Ç–∏—Å–Ω–∏ '–ù—ñ'.",
        reply_markup=confirmation_kb()  
    )

@router.callback_query(F.data == "yes")
async def confirm_cv(callback_query: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    await add_cv(user_id=callback_query.from_user.id, cv_text=str(data))  
    await callback_query.answer("‚úÖ –ì–æ—Ç–æ–≤–æ! –ú–∏ –∑–≥–µ–Ω–µ—Ä—É–≤–∞–ª–∏ —Ç–≤–æ—î CV —Ç–∞ –∑–±–µ—Ä–µ–≥–ª–∏ –π–æ–≥–æ üíæ")
    await callback_query.message.edit_reply_markup(reply_markup=None)  
    await state.clear()

@router.callback_query(F.data == "no")
async def restart_cv(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer("–û–∫–µ–π, –¥–∞–≤–∞–π –ø–æ—á–Ω–µ–º–æ —Å–ø–æ—á–∞—Ç–∫—É! üîÅ")
    await callback_query.message.edit_reply_markup(reply_markup=None)  
    await state.clear()
    await start_cv_form(callback_query.message, state)  