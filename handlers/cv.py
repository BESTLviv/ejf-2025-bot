from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton
from utils.database import add_cv
from keyboards.cv_kb import get_cv_type_kb
from states.cv import CVForm
from keyboards.main_menu_kb import main_menu_kb
from fpdf import FPDF
import os
from aiogram.types import FSInputFile
import os
import requests
from fpdf import FPDF
from aiogram.types import FSInputFile


router = Router()

@router.message(F.text == "üìÇ CV")
async def start_cv_menu(message: types.Message):
    await message.answer(
        "–ö–æ–º–ø–∞–Ω—ñ—ó —à—É–∫–∞—é—Ç—å —Ä—ñ–∑–Ω–∏—Ö —Å–ø–µ—Ü—ñ–∞–ª—ñ—Å—Ç—ñ–≤ —Å–∞–º–µ —Å–µ—Ä–µ–¥ —É—á–∞—Å–Ω–∏–∫—ñ–≤ –Ø—Ä–º–∞—Ä–∫—É!\n"
        "–¢–æ–∂ –∑–∞–≤–∞–Ω—Ç–∞–∂—É–π —Å–≤–æ—î —Ä–µ–∑—é–º–µ —É —Ñ–æ—Ä–º–∞—Ç—ñ PDF —Ç–∞ —á–µ–∫–∞–π –¥–∑–≤—ñ–Ω–æ—á–∫–∞!\n\n"
        "–ù–µ –º–∞—î—à CV? –Ø –¥–æ–ø–æ–º–æ–∂—É ‚Äì –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–π –Ω–∞ –¥–µ–∫—ñ–ª—å–∫–∞ –∑–∞–ø–∏—Ç–∞–Ω—å, —ñ –∑–∞ –∫—ñ–ª—å–∫–∞ —Ö–≤–∏–ª–∏–Ω –º–∞—Ç–∏–º–µ—à –≥–æ—Ç–æ–≤–µ —Ä–µ–∑—é–º–µ!",
        reply_markup=get_cv_type_kb()  
    )

@router.message(F.text == "üìÇ –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ CV")
async def ask_cv_file(message: types.Message):
    await message.answer(
        "–ó–∞–≤–∞–Ω—Ç–∞–∂ —Å–≤–æ—î CV —É —Ñ–æ—Ä–º–∞—Ç—ñ PDF, —ñ –º–∏ –∑–±–µ—Ä–µ–∂–µ–º–æ –π–æ–≥–æ –¥–ª—è —Ç–µ–±–µ!",
        reply_markup=ReplyKeyboardRemove()  
    )

@router.message(F.document)
async def handle_cv_file(message: types.Message):
    if message.document.mime_type != "application/pdf":
        await message.answer("‚ùó–£–ø—Å, —Å—Ö–æ–∂–µ, —â–æ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª—É –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ PDF")
        return

    file_id = message.document.file_id
    await add_cv(message.from_user.id, cv_file_path=file_id)
    await message.answer("‚úÖ CV –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ! –¢–∏ –∫—Ä–∞—Å–µ–Ω—å! üéâ",
    reply_markup=main_menu_kb())


@router.message(F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def back_to_menu(message: types.Message):
    await message.answer(
        "–ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é!",
        reply_markup=main_menu_kb()
    )



FONT_URL = "https://github.com/dejavu-fonts/dejavu-fonts/raw/version_2_37/ttf/DejaVuSans.ttf"
FONT_DIR = "fonts"
FONT_PATH = os.path.join(FONT_DIR, "DejaVuSans.ttf")

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —à—Ä–∏—Ñ—Ç—É
def download_font():
    if not os.path.exists(FONT_PATH):
        os.makedirs(FONT_DIR, exist_ok=True)
        with open(FONT_PATH, "wb") as f:
            f.write(requests.get(FONT_URL).content)

async def generate_and_send_cv(callback_query, user_data):
    download_font()  # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î —à—Ä–∏—Ñ—Ç, —è–∫—â–æ –π–æ–≥–æ –Ω–µ–º–∞—î

    filename = f"{user_data['full_name'].replace(' ', '_')}_cv"
    pdf_path = f"{filename}.pdf"

    pdf = FPDF()
    pdf.add_page()
    pdf.add_font("DejaVu", "", FONT_PATH, uni=True)
    pdf.set_font("DejaVu", size=12)

    pdf.cell(200, 10, txt="Curriculum Vitae", ln=True, align='C')
    pdf.ln(10)
    pdf.cell(200, 10, txt=f"–Ü–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ: {user_data['full_name']}", ln=True)
    pdf.cell(200, 10, txt=f"–†–æ–∫–∏ –Ω–∞–≤—á–∞–Ω–Ω—è: {user_data.get('education_years', '')}", ln=True)
    pdf.cell(200, 10, txt=f"–£–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç: {user_data.get('education', '')}", ln=True)
    pdf.cell(200, 10, txt=f"–°–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ—Å—Ç—å: {user_data.get('speciality', '')}", ln=True)
    pdf.ln(5)

    if user_data.get("skills"):
        pdf.multi_cell(0, 10, txt=f"–ù–∞–≤–∏—á–∫–∏: {user_data['skills']}")
    if user_data.get("experience"):
        pdf.multi_cell(0, 10, txt=f"–î–æ—Å–≤—ñ–¥: {user_data['experience']}")
    if user_data.get("qualities"):
        pdf.multi_cell(0, 10, txt=f"–û—Å–æ–±–∏—Å—Ç—ñ —è–∫–æ—Å—Ç—ñ: {user_data['qualities']}")

    pdf.output(pdf_path)

    document = FSInputFile(pdf_path, filename=f"{filename}.pdf")
    msg = await callback_query.message.answer_document(document, caption="‚úÖ –û—Å—å —Ç–≤–æ—î –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–µ CV!")

    file_id = msg.document.file_id
    await add_cv(callback_query.from_user.id, cv_file_path=file_id)

    os.remove(pdf_path)
    return pdf_path

@router.message(F.text == "üìù –°—Ç–≤–æ—Ä–∏—Ç–∏ CV")
async def start_cv_form(message: types.Message, state: FSMContext):
    await message.answer("–ü–æ—á–Ω–µ–º–æ –∑ –æ—Å–Ω–æ–≤–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó:\nüîπ –í–∞—à–µ –ø–æ–≤–Ω–µ —ñ–º‚Äô—è")
    await state.set_state(CVForm.full_name)

@router.message(CVForm.full_name)
async def ask_phone(message: types.Message, state: FSMContext):
    await state.update_data(full_name=message.text)
    await message.answer("üîπ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É")
    await state.set_state(CVForm.phone)

@router.message(CVForm.phone)
async def ask_email(message: types.Message, state: FSMContext):
    await state.update_data(phone=message.text)
    await message.answer("üîπ –ï–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞ –ø–æ—à—Ç–∞")
    await state.set_state(CVForm.email)

@router.message(CVForm.email)
async def ask_city(message: types.Message, state: FSMContext):
    await state.update_data(email=message.text)
    await message.answer("üîπ –ú—ñ—Å—Ç–æ –ø—Ä–æ–∂–∏–≤–∞–Ω–Ω—è")
    await state.set_state(CVForm.city)

@router.message(CVForm.city)
async def ask_position(message: types.Message, state: FSMContext):
    await state.update_data(city=message.text)
    await message.answer("üîπ –Ø–∫—É –ø–æ—Å–∞–¥—É –∞–±–æ —Å—Ñ–µ—Ä—É —Ä–æ–±–æ—Ç–∏ –≤–∏ —à—É–∫–∞—î—Ç–µ?")
    await state.set_state(CVForm.position)


@router.message(CVForm.position)
async def ask_education(message: types.Message, state: FSMContext):
    await state.update_data(position=message.text)
    await message.answer("üéì –ù–∞–∑–≤–∞ –Ω–∞–≤—á–∞–ª—å–Ω–æ–≥–æ –∑–∞–∫–ª–∞–¥—É")
    await state.set_state(CVForm.education)

@router.message(CVForm.education)
async def ask_speciality(message: types.Message, state: FSMContext):
    await state.update_data(education=message.text)
    await message.answer("üìò –°–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ—Å—Ç—å")
    await state.set_state(CVForm.speciality)

@router.message(CVForm.speciality)
async def ask_education_years(message: types.Message, state: FSMContext):
    await state.update_data(speciality=message.text)
    await message.answer("üìÖ –†–æ–∫–∏ –Ω–∞–≤—á–∞–Ω–Ω—è (–≤—ñ–¥ - –¥–æ)")
    await state.set_state(CVForm.education_years)

@router.message(CVForm.education_years)
async def ask_certifications(message: types.Message, state: FSMContext):
    await state.update_data(education_years=message.text)
    await message.answer("‚úÖ –î–æ–¥–∞—Ç–∫–æ–≤—ñ —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç–∏ / –∫—É—Ä—Å–∏ (—è–∫—â–æ –º–∞—î—Ç–µ)")
    await state.set_state(CVForm.certifications)


@router.message(CVForm.certifications)
async def ask_company(message: types.Message, state: FSMContext):
    await state.update_data(certifications=message.text)
    await message.answer("üíº –ù–∞–∑–≤–∞ –∫–æ–º–ø–∞–Ω—ñ—ó (—è–∫—â–æ —î –¥–æ—Å–≤—ñ–¥)")
    await state.set_state(CVForm.company)

@router.message(CVForm.company)
async def ask_job_title(message: types.Message, state: FSMContext):
    await state.update_data(company=message.text)
    await message.answer("üîπ –ü–æ—Å–∞–¥–∞")
    await state.set_state(CVForm.job_title)

@router.message(CVForm.job_title)
async def ask_job_years(message: types.Message, state: FSMContext):
    await state.update_data(job_title=message.text)
    await message.answer("üîπ –†–æ–∫–∏ —Ä–æ–±–æ—Ç–∏")
    await state.set_state(CVForm.job_years)

@router.message(CVForm.job_years)
async def ask_job_duties(message: types.Message, state: FSMContext):
    await state.update_data(job_years=message.text)
    await message.answer("üîπ –û—Å–Ω–æ–≤–Ω—ñ –æ–±–æ–≤‚Äô—è–∑–∫–∏ –Ω–∞ —Ä–æ–±–æ—Ç—ñ")
    await state.set_state(CVForm.job_duties)


@router.message(CVForm.job_duties)
async def ask_tools(message: types.Message, state: FSMContext):
    await state.update_data(job_duties=message.text)
    await message.answer("üõ†Ô∏è –Ø–∫–∏–º–∏ –ø—Ä–æ–≥—Ä–∞–º–∞–º–∏ –∞–±–æ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏ –≤–º—ñ—î—Ç–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è?")
    await state.set_state(CVForm.tools)

@router.message(CVForm.tools)
async def ask_languages(message: types.Message, state: FSMContext):
    await state.update_data(tools=message.text)
    await message.answer("üåê –ó–Ω–∞–Ω–Ω—è –º–æ–≤ (—è–∫—ñ —ñ –Ω–∞ —è–∫–æ–º—É —Ä—ñ–≤–Ω—ñ)")
    await state.set_state(CVForm.languages)

@router.message(CVForm.languages)
async def ask_other_skills(message: types.Message, state: FSMContext):
    await state.update_data(languages=message.text)
    await message.answer("ü§π‚Äç‚ôÇÔ∏è –Ø–∫—ñ —â–µ –∫–æ—Ä–∏—Å–Ω—ñ –Ω–∞–≤–∏—á–∫–∏ –º–∞—î—Ç–µ?")
    await state.set_state(CVForm.other_skills)


@router.message(CVForm.other_skills)
async def ask_about(message: types.Message, state: FSMContext):
    await state.update_data(other_skills=message.text)
    await message.answer("üë§ –û–ø–∏—à—ñ—Ç—å —Å–µ–±–µ —è–∫ –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞")
    await state.set_state(CVForm.about)

@router.message(CVForm.about)
async def ask_schedule(message: types.Message, state: FSMContext):
    await state.update_data(about=message.text)
    await message.answer("‚è∞ –Ø–∫–∏–π –≥—Ä–∞—Ñ—ñ–∫ –≤–∞–º –ø—ñ–¥—Ö–æ–¥–∏—Ç—å?")
    await state.set_state(CVForm.schedule)


def confirmation_kb():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–¢–∞–∫", callback_data="yes")],
            [InlineKeyboardButton(text="–ù—ñ", callback_data="no")]
        ]
    )


@router.message(CVForm.schedule)
async def confirm_cv(message: types.Message, state: FSMContext):
    await state.update_data(schedule=message.text)
    data = await state.get_data()

    summary = "\n".join([f"‚Ä¢ {key}: {value}" for key, value in data.items()])
    kb = types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="–¢–∞–∫"),types.KeyboardButton(text="–ù—ñ")]
        ],
        resize_keyboard=True
    )
    await message.answer(f"–û—Å—å —â–æ —Ç–∏ –∑–∞–ø–æ–≤–Ω–∏–≤(–ª–∞):\n\n{summary}\n\n–í—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ? (–¢–∞–∫ / –ù—ñ)",
    reply_markup=kb)
    await state.set_state(CVForm.confirm)

import json

@router.message(CVForm.confirm, F.text.in_(["–¢–∞–∫", "–ù—ñ"]))
async def handle_confirmation(message: types.Message, state: FSMContext):
    if message.text == "–¢–∞–∫":
        data = await state.get_data()
        await add_cv(
            user_id=message.from_user.id,
            cv_text=json.dumps(data, ensure_ascii=False)
        )

        await message.answer(
            "‚úÖ –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –∑–±–µ—Ä–µ–∂–µ–Ω–∞! –ú–æ–∂–µ—à –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Å–≤–æ—î CV –∞–±–æ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å —É –º–µ–Ω—é.",
            reply_markup=main_menu_kb()
        )
        await state.clear()
    else:
        await message.answer("–û–∫–µ–π, –¥–∞–≤–∞–π –ø–æ—á–Ω–µ–º–æ —Å–ø–æ—á–∞—Ç–∫—É! üîÅ", reply_markup=ReplyKeyboardRemove())
        await state.clear()
        await start_cv_form(message, state)
