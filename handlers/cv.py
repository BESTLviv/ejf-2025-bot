from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton, BufferedInputFile
from aiogram.fsm.state import State, StatesGroup
from utils.database import get_user, add_cv, get_cv
from keyboards.cv_kb import get_cv_type_kb, change_cv_type_kb, has_cv_kb, back2menu_kb
from keyboards.main_menu_kb import main_menu_kb
from PIL import Image, ImageDraw, ImageFont
import os
import re
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

cv_router = Router()

def is_correct_text(text):
    contains_letters = re.search(r'[a-zA-Z–∞-—è–ê-–Ø—ñ–Ü—ó–á—î–Ñ“ë“ê]', text)
    only_symbols = re.fullmatch(r'[\W_]+', text)
    return bool(contains_letters) and not only_symbols

back2menu = "‚úèÔ∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ –±–ª–æ–∫—ñ–≤"
backtomenu = "‚ö°Ô∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ –±–ª–æ–∫—ñ–≤"

class CVStates(StatesGroup):
    position = State()
    languages = State()
    education = State()
    experience = State()
    skills = State()
    contacts = State()
    about = State()
    confirmation = State()

class TempCVStates(StatesGroup):
    position = State()
    languages = State()
    education = State()
    experience = State()
    skills = State()
    contacts = State()
    about = State()
    confirmation = State()

@cv_router.message(F.text == "üìÇ CV")
async def start_cv_menu(message: types.Message):
    await message.answer(
        "<b>–ö–æ–º–ø–∞–Ω—ñ—ó —à—É–∫–∞—é—Ç—å —Ä—ñ–∑–Ω–∏—Ö —Å–ø–µ—Ü—ñ–∞–ª—ñ—Å—Ç—ñ–≤ —Å–∞–º–µ —Å–µ—Ä–µ–¥ —É—á–∞—Å–Ω–∏–∫—ñ–≤ –Ø—Ä–º–∞—Ä–∫—É!</b>\n\n"
        "–¢–æ–∂ –∑–∞–≤–∞–Ω—Ç–∞–∂—É–π —Å–≤–æ—î —Ä–µ–∑—é–º–µ —É —Ñ–æ—Ä–º–∞—Ç—ñ PDF –∞–±–æ —Å—Ç–≤–æ—Ä–∏ –π–æ–≥–æ —Ç—É—Ç –∑–∞ –∫—ñ–ª—å–∫–∞ —Ö–≤–∏–ª–∏–Ω!",
        parse_mode="HTML",
        reply_markup=get_cv_type_kb()
    )

@cv_router.message(F.text == "‚ö°Ô∏è –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Å–≤–æ—î —Ä–µ–∑—é–º–µ")
async def ask_cv_file(message: types.Message):
    if not is_correct_text(message.text):
        await message.answer("‚ö†Ô∏è –°—Ö–æ–∂–µ, —â–æ –¥–∞–Ω—ñ –≤–≤–µ–¥–µ–Ω—ñ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑!")
        return
    await message.answer(
        "–ó–∞–≤–∞–Ω—Ç–∞–∂ —Å–≤–æ—î CV —É —Ñ–æ—Ä–º–∞—Ç—ñ PDF, —ñ –º–∏ –∑–±–µ—Ä–µ–∂–µ–º–æ –π–æ–≥–æ –¥–ª—è —Ç–µ–±–µ!",
        reply_markup=main_menu_kb()
    )

@cv_router.message(F.document)
async def handle_cv_file(message: types.Message):
    if message.document.mime_type != "application/pdf":
        await message.answer("‚ùó –£–ø—Å, —Å—Ö–æ–∂–µ, —â–æ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª—É –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ PDF —Ñ–æ—Ä–º–∞—Ç.")
        return

    max_file_size = 10 * 1024 * 1024  # 10 –ú–ë
    if message.document.file_size > max_file_size:
        await message.answer("–£–ø—Åü•≤. –°—Ö–æ–∂–µ, —Ñ–∞–π–ª –∑–∞–≤–µ–ª–∏–∫–∏–π. –ô–æ–≥–æ —Ä–æ–∑–º—ñ—Ä –º–∞—î –±—É—Ç–∏ –Ω–µ –±—ñ–ª—å—à–∏–º –∑–∞ 10 –ú–ë.")
        return

    try:
        file_id = message.document.file_id
        file = await message.bot.get_file(file_id)
        await message.bot.download_file(file.file_path, timeout=30)
    except Exception as e:
        await message.answer("üïí –§–∞–π–ª –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î—Ç—å—Å—è –¥—É–∂–µ –¥–æ–≤–≥–æ‚Ä¶ –ü–µ—Ä–µ–≤—ñ—Ä —Ä–æ–∑–º—ñ—Ä —ñ —Å–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑!")
        return

    await add_cv(
        user_id=message.from_user.id,
        cv_file_path=file_id,
        position='',
        languages='',
        education='',
        experience='',
        skills='',
        about='',
        contacts=''
    )
    await message.answer("‚úÖ CV –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ! üéâ", reply_markup=main_menu_kb())

@cv_router.message(F.text == "‚ö°Ô∏è –°—Ç–≤–æ—Ä–∏—Ç–∏ —Ä–µ–∑—é–º–µ —Ä–∞–∑–æ–º")
async def cmd_start(message: types.Message, state: FSMContext):
    existing_cv = await get_cv(message.from_user.id)
    has_cv_data = existing_cv and all(existing_cv.get(field) for field in ['position', 'languages', 'education', 'experience', 'skills', 'about', 'contacts', 'cv_file_path'])
    if has_cv_data:
        await message.answer(
            "–ë–∞—á–∏–º–æ, —â–æ —Ç–∏ –≤–∂–µ —Å—Ç–≤–æ—Ä–∏–≤ —Ä–µ–∑—é–º–µ, —Ç–æ —â–æ —á–µ–º–ø—ñ–æ–Ω–µ, –Ω–µ –∑—É–ø–∏–Ω—è—î—à—Å—è –Ω–∞ –æ–¥–Ω–æ–º—É?",
            reply_markup=has_cv_kb()
        )
        await state.set_state(CVStates.confirmation)
    else:
        await state.clear()
        await state.set_state(CVStates.position)
        await message.answer(
            "–¢–æ–∂ –ø–æ—á–Ω—ñ–º–æ, —è–∫–∞ –ø–æ—Å–∞–¥–∞ –∞–±–æ –Ω–∞–ø—Ä—è–º —Ç–µ–±–µ —Ü—ñ–∫–∞–≤–∏—Ç—å? –ù–∞–ø—Ä–∏–∫–ª–∞–¥: —Å—Ç–∞–∂—É–≤–∞–Ω–Ω—è –≤ —Å—Ñ–µ—Ä—ñ Data Science, —Ä–æ–±–æ—Ç–∞ —ñ–Ω–∂–µ–Ω–µ—Ä–æ–º-–ø—Ä–æ—î–∫—Ç—É–≤–∞–ª—å–Ω–∏–∫–æ–º —Ç–æ—â–æ. (–ü–∏—Ç–∞–Ω–Ω—è 1 –∑ 7)",
            reply_markup=back2menu_kb()
        )

@cv_router.message(CVStates.position)
async def process_position(message: types.Message, state: FSMContext):
    if message.text in [back2menu, backtomenu]:
        await state.clear()
        await message.answer("–ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –±–ª–æ–∫—ñ–≤!", reply_markup=main_menu_kb())
        return
    data = await state.get_data()
    if data.get("position"):
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–ó–∞–ª–∏—à–∏—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–Ω—é –≤—ñ–¥–ø–æ–≤—ñ–¥—å", callback_data="keep_previous_position")]
            ]
        )
        await message.answer(
            f"–¢–æ–∂ –ø–æ—á–Ω—ñ–º–æ, —è–∫–∞ –ø–æ—Å–∞–¥–∞ –∞–±–æ –Ω–∞–ø—Ä—è–º —Ç–µ–±–µ —Ü—ñ–∫–∞–≤–∏—Ç—å?",
            reply_markup=keyboard
        )
        return

    if not is_correct_text(message.text):
        await message.answer("‚ö†Ô∏è –°—Ö–æ–∂–µ, —â–æ –¥–∞–Ω—ñ –≤–≤–µ–¥–µ–Ω—ñ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑!")
        return

    await state.update_data(position=message.text)
    await state.set_state(CVStates.languages)
    await message.answer("–Ø–∫–∏–º–∏ –º–æ–≤–∞–º–∏ —Ç–∏ –≤–æ–ª–æ–¥—ñ—î—à. –í–∫–∞–∂–∏ —Ä—ñ–≤–µ–Ω—å –≤–æ–ª–æ–¥—ñ–Ω–Ω—è. –ù–∞–ø—Ä–∏–∫–ª–∞–¥: —É–∫—Ä–∞—ó–Ω—Å—å–∫–∞ ‚Äî —Ä—ñ–¥–Ω–∞, –∞–Ω–≥–ª—ñ–π—Å—å–∫–∞ ‚Äî B2. (–ü–∏—Ç–∞–Ω–Ω—è 2 –∑ 7)")

@cv_router.callback_query(F.data == "keep_previous_position")
async def keep_previous_position(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(CVStates.languages)
    await callback.message.answer("–Ø–∫–∏–º–∏ –º–æ–≤–∞–º–∏ —Ç–∏ –≤–æ–ª–æ–¥—ñ—î—à. –í–∫–∞–∂–∏ —Ä—ñ–≤–µ–Ω—å –≤–æ–ª–æ–¥—ñ–Ω–Ω—è. –ù–∞–ø—Ä–∏–∫–ª–∞–¥: —É–∫—Ä–∞—ó–Ω—Å—å–∫–∞ ‚Äî —Ä—ñ–¥–Ω–∞, –∞–Ω–≥–ª—ñ–π—Å—å–∫–∞ ‚Äî B2.")
    await callback.answer()

@cv_router.message(CVStates.languages)
async def process_languages(message: types.Message, state: FSMContext):
    if message.text in [back2menu, backtomenu]:
        await state.clear()
        await message.answer("–ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –±–ª–æ–∫—ñ–≤!", reply_markup=main_menu_kb())
        return
    if not is_correct_text(message.text):
        await message.answer("‚ö†Ô∏è –°—Ö–æ–∂–µ, —â–æ –¥–∞–Ω—ñ –≤–≤–µ–¥–µ–Ω—ñ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑!")
        return

    VALID_LEVELS = {"A1", "A2", "B1", "B2", "C1", "C2", "–ê1", "–ê2", "–í1", "–í2", "–°1", "–°2"}
    text = message.text.lower()
    all_levels_raw = re.findall(r'\b([a-zA-Z][0-9])\b', message.text)
    all_levels_upper = [level.upper() for level in all_levels_raw]
    has_native = "—Ä—ñ–¥–Ω–∞" in text
    valid_levels = [level for level in all_levels_upper if level in VALID_LEVELS]
    invalid_levels = [level for level in all_levels_upper if level not in VALID_LEVELS]

    if not has_native and not all_levels_raw:
        await message.answer("‚ö†Ô∏è –í–∫–∞–∂–∏ —Ä—ñ–≤–µ–Ω—å –≤–æ–ª–æ–¥—ñ–Ω–Ω—è. –ù–∞–ø—Ä–∏–∫–ª–∞–¥: —É–∫—Ä–∞—ó–Ω—Å—å–∫–∞ ‚Äî —Ä—ñ–¥–Ω–∞, –∞–Ω–≥–ª—ñ–π—Å—å–∫–∞ ‚Äî B2.")
        return
    if invalid_levels or (not has_native and not valid_levels):
        await message.answer("‚ö†Ô∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Ä—ñ–≤–Ω—è. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑!")
        return

    await state.update_data(languages=message.text)
    await state.set_state(CVStates.about)
    await message.answer("–†–æ–∑–∫–∞–∂–∏ –∫–æ—Ä–æ—Ç–∫–æ –ø—Ä–æ —Å–µ–±–µ. –ß–∏–º —Ü—ñ–∫–∞–≤–∏—à—Å—è, —è–∫—É —Å—Ñ–µ—Ä—É —Ä–æ–∑–≥–ª—è–¥–∞—î—à. (–ü–∏—Ç–∞–Ω–Ω—è 3 –∑ 7)")

@cv_router.message(CVStates.about)
async def process_about(message: types.Message, state: FSMContext):
    if message.text in [back2menu, backtomenu]:
        await state.clear()
        await message.answer("–ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –±–ª–æ–∫—ñ–≤!", reply_markup=main_menu_kb())
        return
    if not is_correct_text(message.text):
        await message.answer("‚ö†Ô∏è –°—Ö–æ–∂–µ, —â–æ –¥–∞–Ω—ñ –≤–≤–µ–¥–µ–Ω—ñ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑!")
        return
    await state.update_data(about=message.text)
    await state.set_state(CVStates.education)
    await message.answer("–í–∫–∞–∂–∏ —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç —Ç–∞ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ—Å—Ç—å. –Ø–∫—â–æ —î –∫—É—Ä—Å–∏, –¥–æ–¥–∞–π —ó—Ö! (–ü–∏—Ç–∞–Ω–Ω—è 4 –∑ 7)")

@cv_router.message(CVStates.education)
async def process_education(message: types.Message, state: FSMContext):
    if message.text in [back2menu, backtomenu]:
        await state.clear()
        await message.answer("–ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –±–ª–æ–∫—ñ–≤!", reply_markup=main_menu_kb())
        return
    if not is_correct_text(message.text):
        await message.answer("‚ö†Ô∏è –°—Ö–æ–∂–µ, —â–æ –¥–∞–Ω—ñ –≤–≤–µ–¥–µ–Ω—ñ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑!")
        return
    await state.update_data(education=message.text)
    await state.set_state(CVStates.skills)
    await message.answer("–Ø–∫–∏–º–∏ –Ω–∞–≤–∏—á–∫–∞–º–∏ —Ç–∏ –≤–æ–ª–æ–¥—ñ—î—à? –¢–µ—Ö–Ω—ñ—á–Ω—ñ, –ø—Ä–æ–≥—Ä–∞–º–∏, –æ—Å–æ–±–∏—Å—Ç—ñ —è–∫–æ—Å—Ç—ñ. (–ü–∏—Ç–∞–Ω–Ω—è 5 –∑ 7)")

@cv_router.message(CVStates.skills)
async def process_skills(message: types.Message, state: FSMContext):
    if message.text in [back2menu, backtomenu]:
        await state.clear()
        await message.answer("–ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –±–ª–æ–∫—ñ–≤!", reply_markup=main_menu_kb())
        return
    if not is_correct_text(message.text):
        await message.answer("‚ö†Ô∏è –°—Ö–æ–∂–µ, —â–æ –¥–∞–Ω—ñ –≤–≤–µ–¥–µ–Ω—ñ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑!")
        return
    await state.update_data(skills=message.text)
    await state.set_state(CVStates.experience)
    await message.answer("–ú–∞—î—à –¥–æ—Å–≤—ñ–¥ —Ä–æ–±–æ—Ç–∏? –û–ø–∏—à–∏ –ø–æ—Å–∞–¥—É, –æ–±–æ–≤'—è–∑–∫–∏, –ø–µ—Ä—ñ–æ–¥. –Ø–∫—â–æ –Ω—ñ ‚Äî –Ω–∞–ø–∏—à–∏ ¬´–ù–Ü¬ª. (–ü–∏—Ç–∞–Ω–Ω—è 6 –∑ 7)")

@cv_router.message(CVStates.experience)
async def process_experience(message: types.Message, state: FSMContext):
    if message.text in [back2menu, backtomenu]:
        await state.clear()
        await message.answer("–ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –±–ª–æ–∫—ñ–≤!", reply_markup=main_menu_kb())
        return
    if not is_correct_text(message.text):
        await message.answer("‚ö†Ô∏è –°—Ö–æ–∂–µ, —â–æ –¥–∞–Ω—ñ –≤–≤–µ–¥–µ–Ω—ñ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑!")
        return
    await state.update_data(experience=message.text)
    await state.set_state(CVStates.contacts)
    await message.answer("–ó–∞–ª–∏—à –∫–æ–Ω—Ç–∞–∫—Ç–∏: Email —Ç–∞ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É. (–ü–∏—Ç–∞–Ω–Ω—è 7 –∑ 7)")

@cv_router.message(CVStates.contacts)
async def process_contacts(message: types.Message, state: FSMContext):
    if message.text in [back2menu, backtomenu]:
        await state.clear()
        await message.answer("–ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –±–ª–æ–∫—ñ–≤!", reply_markup=main_menu_kb())
        return
    if not is_correct_text(message.text):
        await message.answer("‚ö†Ô∏è –°—Ö–æ–∂–µ, —â–æ –¥–∞–Ω—ñ –≤–≤–µ–¥–µ–Ω—ñ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑!")
        return
    await state.update_data(contacts=message.text)
    data = await state.get_data()

    user = await get_user(message.from_user.id)
    user_name = user.get("name", "") if user else ""

    summary = (
        f"–Ü–º'—è: {user_name}\n"
        f"–ü–æ—Å–∞–¥–∞: {data['position']}\n"
        f"–ú–æ–≤–∏: {data['languages']}\n"
        f"–û—Å–≤—ñ—Ç–∞: {data['education']}\n"
        f"–î–æ—Å–≤—ñ–¥: {data['experience']}\n"
        f"–ù–∞–≤–∏—á–∫–∏: {data['skills']}\n"
        f"–ü—Ä–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞: {data['about']}\n"
        f"–ö–æ–Ω—Ç–∞–∫—Ç–∏: {data['contacts']}\n\n"
        "–í—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ?"
    )

    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–¢–∞–∫"), KeyboardButton(text="–ù—ñ")]],
        resize_keyboard=True
    )
    await message.answer(summary, reply_markup=keyboard)
    await state.set_state(CVStates.confirmation)

def draw_wrapped_text(draw, text, font, fill, x, y, max_width_pixels, line_spacing=10):
    lines = []
    words = text.split()
    current_line = ""
    
    for word in words:
        test_line = f"{current_line} {word}".strip()
        bbox = font.getbbox(test_line)
        text_width = bbox[2] - bbox[0]
        
        if text_width <= max_width_pixels:
            current_line = test_line
        else:
            if current_line:
                lines.append(current_line)
            current_line = word
    
    if current_line:
        lines.append(current_line)
    
    line_height = font.getbbox("A")[3] - font.getbbox("A")[1] + line_spacing
    for line in lines:
        draw.text((x, y), line, font=font, fill=fill)
        y += line_height
    return y

@cv_router.message(CVStates.confirmation, F.text.casefold() == "—Ç–∞–∫")
async def process_confirm_yes(message: types.Message, state: FSMContext):
    data = await state.get_data()
    try:
        user = await get_user(message.from_user.id)
        user_name = user.get("name", "") if user else ""
        name_parts = user_name.split()
        user_name_safe = "_".join(name_parts) if name_parts else f"user_{message.from_user.id}"
    except Exception as e:
        user_name = f"user_{message.from_user.id}"
        user_name_safe = user_name

    pdf_path = f"cv_{user_name_safe}.pdf"
    try:
        image = Image.open("templates/cv_template.png").convert("RGB")
        draw = ImageDraw.Draw(image)
        font_text = ImageFont.truetype("fonts/Nunito-Regular.ttf", 16)
        font_title = ImageFont.truetype("fonts/Exo2-Regular.ttf", 40)

        max_width_pixels = 350
        x_position = 320
        y_position = 60

        y_position = draw_wrapped_text(
            draw, user_name, font=font_title, fill="#111A94",
            x=x_position, y=y_position, max_width_pixels=max_width_pixels, line_spacing=10
        )
        y_position += 30

        fields = [
            ("–ë–∞–∂–∞–Ω–∞ –ø–æ—Å–∞–¥–∞:", data['position']),
            ("–í–æ–ª–æ–¥—ñ–Ω–Ω—è –º–æ–≤–∞–º–∏:", data['languages']),
            ("–û—Å–≤—ñ—Ç–∞:", data['education']),
            ("–î–æ—Å–≤—ñ–¥:", data['experience']),
            ("–ù–∞–≤–∏—á–∫–∏:", data['skills']),
            ("–ü—Ä–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞:", data['about']),
            ("–ö–æ–Ω—Ç–∞–∫—Ç–∏:", data['contacts'])
        ]

        for label, content in fields:
            y_position = draw_wrapped_text(
                draw, label, font=font_text, fill="#111A94",
                x=x_position, y=y_position, max_width_pixels=max_width_pixels, line_spacing=10
            )
            y_position += 10
            y_position = draw_wrapped_text(
                draw, content, font=font_text, fill="#000000",
                x=x_position + 10, y=y_position, max_width_pixels=max_width_pixels - 10, line_spacing=10
            )
            y_position += 20

        image.save(pdf_path, "PDF")

        with open(pdf_path, "rb") as pdf_file:
            file_bytes = pdf_file.read()
            document = BufferedInputFile(file=file_bytes, filename=f"CV_{user_name_safe}.pdf")
            doc = await message.answer_document(document)
            file_id = doc.document.file_id

        await add_cv(
            user_id=message.from_user.id,
            cv_file_path=file_id,
            position=data['position'],
            languages=data['languages'],
            education=data['education'],
            experience=data['experience'],
            skills=data['skills'],
            about=data['about'],
            contacts=data['contacts']
        )
    except Exception as e:
        await message.answer("‚ùó –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è PDF. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ.")
        return
    finally:
        if os.path.exists(pdf_path):
            os.remove(pdf_path)

    await message.answer("–í—ñ—Ç–∞—î–º–æ! –¢–≤–æ—î —Ä–µ–∑—é–º–µ –≥–æ—Ç–æ–≤–µ. –¢–µ–ø–µ—Ä –π–æ–≥–æ –ø–æ–±–∞—á–∞—Ç—å —Ä–æ–±–æ—Ç–æ–¥–∞–≤—Ü—ñ.", reply_markup=main_menu_kb())
    await state.clear()

@cv_router.message(CVStates.confirmation, F.text.casefold() == "–Ω—ñ")
async def process_confirm_no(message: types.Message, state: FSMContext):
    if not is_correct_text(message.text):
        await message.answer("‚ö†Ô∏è –°—Ö–æ–∂–µ, —â–æ –¥–∞–Ω—ñ –≤–≤–µ–¥–µ–Ω—ñ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑!")
        return
    await state.clear()
    await state.set_state(CVStates.position)
    await message.answer("–ì–∞—Ä–∞–∑–¥, –¥–∞–≤–∞–π —Å–ø—Ä–æ–±—É—î–º–æ —â–µ —Ä–∞–∑. –Ø–∫–∞ –ø–æ—Å–∞–¥–∞ –∞–±–æ –Ω–∞–ø—Ä—è–º —Ç–µ–±–µ —Ü—ñ–∫–∞–≤–∏—Ç—å?", reply_markup=ReplyKeyboardRemove())

@cv_router.message(F.text == "‚ö°Ô∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ –±–ª–æ–∫—ñ–≤")
async def back_to_menu(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –±–ª–æ–∫—ñ–≤!", reply_markup=main_menu_kb())

@cv_router.message(F.text == "‚úèÔ∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ –±–ª–æ–∫—ñ–≤")
async def back_to_menu(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –±–ª–æ–∫—ñ–≤!", reply_markup=main_menu_kb())

@cv_router.message(F.text == "‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –≤–∞—Ä—ñ–∞–Ω—Ç")
async def change_existing_cv(message: types.Message, state: FSMContext):
    await message.answer("–ì–∞—Ä–∞–∑–¥, –∑–∞—Ä–∞–∑ –Ω–∞ –µ–∫—Ä–∞–Ω—ñ —Ç–∏ –±–∞—á–∏—à –≤—Å—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –∑ —Ç–≤–æ–≥–æ CV\n–û–±–∏—Ä–∞–π, —è–∫—É –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π —Ç–∏ —Ö–æ—á–µ—à –∑–º—ñ–Ω–∏—Ç–∏, –∞–±–æ –∑–∞–ø–æ–≤–Ω—é–π CV –∑–∞–Ω–æ–≤–æ!")
    await state.clear()
    try:
        user = await get_user(message.from_user.id)
        user_name = user.get("name", "") if user else ""
    except Exception as e:
        user_name = ""
    cv_data = await get_cv(message.from_user.id)
    if cv_data:
        summary = (
            f"–Ü–º'—è: {user_name}\n"
            f"–ü–æ—Å–∞–¥–∞: {cv_data['position']}\n"
            f"–ú–æ–≤–∏: {cv_data['languages']}\n"
            f"–û—Å–≤—ñ—Ç–∞: {cv_data['education']}\n"
            f"–î–æ—Å–≤—ñ–¥: {cv_data['experience']}\n"
            f"–ù–∞–≤–∏—á–∫–∏: {cv_data['skills']}\n"
            f"–ü—Ä–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞: {cv_data['about']}\n"
            f"–ö–æ–Ω—Ç–∞–∫—Ç–∏: {cv_data['contacts']}"
        )
        await message.answer(summary, reply_markup=change_cv_type_kb())
        await state.clear()

@cv_router.message(F.text == "‚úèÔ∏è –¢–∞–∫, —Ö–æ—á—É –¥–æ–¥–∞—Ç–∏ —â–µ –æ–¥–Ω–µ CV")
async def change_existing_cv(message: types.Message, state: FSMContext):
    await message.answer("–ß—É–¥–æ–≤–æ, –¥–∞–≤–∞–π –ø–æ—á–Ω–µ–º–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ CV!")
    await state.clear()
    await state.set_state(CVStates.position)
    await message.answer("–¢–æ–∂ –ø–æ—á–Ω—ñ–º–æ –∑–Ω–æ–≤—É, —è–∫–∞ –ø–æ—Å–∞–¥–∞ –∞–±–æ –Ω–∞–ø—Ä—è–º —Ç–µ–±–µ —Ü—ñ–∫–∞–≤–∏—Ç—å?", reply_markup=back2menu_kb())

async def update_cv_in_db(user_id: int, temp_data: dict):
    existing_cv = await get_cv(user_id)
    updated_cv = {
        "position": temp_data.get("position", existing_cv.get("position", "")),
        "languages": temp_data.get("languages", existing_cv.get("languages", "")),
        "education": temp_data.get("education", existing_cv.get("education", "")),
        "experience": temp_data.get("experience", existing_cv.get("experience", "")),
        "skills": temp_data.get("skills", existing_cv.get("skills", "")),
        "about": temp_data.get("about", existing_cv.get("about", "")),
        "contacts": temp_data.get("contacts", existing_cv.get("contacts", "")),
        "cv_file_path": existing_cv.get("cv_file_path", "")
    }
    await add_cv(
        user_id=user_id,
        position=updated_cv["position"],
        languages=updated_cv["languages"],
        education=updated_cv["education"],
        experience=updated_cv["experience"],
        skills=updated_cv["skills"],
        about=updated_cv["about"],
        contacts=updated_cv["contacts"],
        cv_file_path=updated_cv["cv_file_path"]
    )

@cv_router.callback_query(F.data.startswith("edit_"))
async def edit_field(callback: types.CallbackQuery, state: FSMContext):
    field_map = {
        "edit_position": ("position", "–Ø–∫–∞ –ø–æ—Å–∞–¥–∞ –∞–±–æ –Ω–∞–ø—Ä—è–º —Ç–µ–±–µ —Ü—ñ–∫–∞–≤–∏—Ç—å?"),
        "edit_languages": ("languages", "–Ø–∫–∏–º–∏ –º–æ–≤–∞–º–∏ —Ç–∏ –≤–æ–ª–æ–¥—ñ—î—à? –í–∫–∞–∂–∏ —Ä—ñ–≤–µ–Ω—å –≤–æ–ª–æ–¥—ñ–Ω–Ω—è."),
        "edit_education": ("education", "–í–∫–∞–∂–∏ —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç —Ç–∞ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ—Å—Ç—å, –∫—É—Ä—Å–∏."),
        "edit_experience": ("experience", "–û–ø–∏—à–∏ –¥–æ—Å–≤—ñ–¥ —Ä–æ–±–æ—Ç–∏ –∞–±–æ –Ω–∞–ø–∏—à–∏ ¬´–ù–Ü¬ª."),
        "edit_skills": ("skills", "–Ø–∫–∏–º–∏ –Ω–∞–≤–∏—á–∫–∞–º–∏ —Ç–∏ –≤–æ–ª–æ–¥—ñ—î—à?"),
        "edit_about": ("about", "–†–æ–∑–∫–∞–∂–∏ –∫–æ—Ä–æ—Ç–∫–æ –ø—Ä–æ —Å–µ–±–µ."),
        "edit_contacts": ("contacts", "–ó–∞–ª–∏—à —Å–≤–æ—ó –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ñ –¥–∞–Ω—ñ!")
    }

    callback_data = callback.data
    field, question = field_map.get(callback_data, (None, None))

    if not field:
        await callback.answer("–ù–µ–≤—ñ–¥–æ–º–∞ –¥—ñ—è!", show_alert=True)
        return

    await state.set_state(getattr(TempCVStates, field))
    await callback.message.answer(question)
    await callback.answer()

@cv_router.message(TempCVStates.position)
async def edit_position(message: types.Message, state: FSMContext):
    if not is_correct_text(message.text):
        await message.answer("‚ö†Ô∏è –°—Ö–æ–∂–µ, —â–æ –¥–∞–Ω—ñ –≤–≤–µ–¥–µ–Ω—ñ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑!")
        return
    await state.update_data(position=message.text)
    temp_data = await state.get_data()
    await update_cv_in_db(message.from_user.id, temp_data)
    await message.answer("–ó–º—ñ–Ω–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ!\n–û–±–µ—Ä–∏ –Ω–∞—Å—Ç—É–ø–Ω–µ –ø–æ–ª–µ.", reply_markup=change_cv_type_kb())
    await state.clear()

@cv_router.message(TempCVStates.languages)
async def edit_languages(message: types.Message, state: FSMContext):
    if not is_correct_text(message.text):
        await message.answer("‚ö†Ô∏è –°—Ö–æ–∂–µ, —â–æ –¥–∞–Ω—ñ –≤–≤–µ–¥–µ–Ω—ñ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑!")
        return
    await state.update_data(languages=message.text)
    temp_data = await state.get_data()
    await update_cv_in_db(message.from_user.id, temp_data)
    await message.answer("–ó–º—ñ–Ω–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ!\n–û–±–µ—Ä–∏ –Ω–∞—Å—Ç—É–ø–Ω–µ –ø–æ–ª–µ.", reply_markup=change_cv_type_kb())
    await state.clear()

@cv_router.message(TempCVStates.education)
async def edit_education(message: types.Message, state: FSMContext):
    if not is_correct_text(message.text):
        await message.answer("‚ö†Ô∏è –°—Ö–æ–∂–µ, —â–æ –¥–∞–Ω—ñ –≤–≤–µ–¥–µ–Ω—ñ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑!")
        return
    await state.update_data(education=message.text)
    temp_data = await state.get_data()
    await update_cv_in_db(message.from_user.id, temp_data)
    await message.answer("–ó–º—ñ–Ω–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ!\n–û–±–µ—Ä–∏ –Ω–∞—Å—Ç—É–ø–Ω–µ –ø–æ–ª–µ.", reply_markup=change_cv_type_kb())
    await state.clear()

@cv_router.message(TempCVStates.experience)
async def edit_experience(message: types.Message, state: FSMContext):
    if not is_correct_text(message.text):
        await message.answer("‚ö†Ô∏è –°—Ö–æ–∂–µ, —â–æ –¥–∞–Ω—ñ –≤–≤–µ–¥–µ–Ω—ñ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑!")
        return
    await state.update_data(experience=message.text)
    temp_data = await state.get_data()
    await update_cv_in_db(message.from_user.id, temp_data)
    await message.answer("–ó–º—ñ–Ω–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ!\n–û–±–µ—Ä–∏ –Ω–∞—Å—Ç—É–ø–Ω–µ –ø–æ–ª–µ.", reply_markup=change_cv_type_kb())
    await state.clear()

@cv_router.message(TempCVStates.skills)
async def edit_skills(message: types.Message, state: FSMContext):
    if not is_correct_text(message.text):
        await message.answer("‚ö†Ô∏è –°—Ö–æ–∂–µ, —â–æ –¥–∞–Ω—ñ –≤–≤–µ–¥–µ–Ω—ñ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑!")
        return
    await state.update_data(skills=message.text)
    temp_data = await state.get_data()
    await update_cv_in_db(message.from_user.id, temp_data)
    await message.answer("–ó–º—ñ–Ω–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ!\n–û–±–µ—Ä–∏ –Ω–∞—Å—Ç—É–ø–Ω–µ –ø–æ–ª–µ.", reply_markup=change_cv_type_kb())
    await state.clear()

@cv_router.message(TempCVStates.about)
async def edit_about(message: types.Message, state: FSMContext):
    if not is_correct_text(message.text):
        await message.answer("‚ö†Ô∏è –°—Ö–æ–∂–µ, —â–æ –¥–∞–Ω—ñ –≤–≤–µ–¥–µ–Ω—ñ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑!")
        return
    await state.update_data(about=message.text)
    temp_data = await state.get_data()
    await update_cv_in_db(message.from_user.id, temp_data)
    await message.answer("–ó–º—ñ–Ω–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ!\n–û–±–µ—Ä–∏ –Ω–∞—Å—Ç—É–ø–Ω–µ –ø–æ–ª–µ.", reply_markup=change_cv_type_kb())
    await state.clear()

@cv_router.message(TempCVStates.contacts)
async def edit_contacts(message: types.Message, state: FSMContext):
    if not is_correct_text(message.text):
        await message.answer("‚ö†Ô∏è –°—Ö–æ–∂–µ, —â–æ –¥–∞–Ω—ñ –≤–≤–µ–¥–µ–Ω—ñ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑!")
        return
    await state.update_data(contacts=message.text)
    temp_data = await state.get_data()
    await update_cv_in_db(message.from_user.id, temp_data)
    await message.answer("–ó–º—ñ–Ω–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ!\n–û–±–µ—Ä–∏ –Ω–∞—Å—Ç—É–ø–Ω–µ –ø–æ–ª–µ.", reply_markup=change_cv_type_kb())
    await state.clear()

@cv_router.callback_query(F.data == "confirm_editing")
async def confirm_editing(callback: types.CallbackQuery, state: FSMContext):
    temp_data = await state.get_data()
    existing_cv = await get_cv(callback.from_user.id)

    updated_cv = {
        "position": temp_data.get("position", existing_cv.get("position", "")),
        "languages": temp_data.get("languages", existing_cv.get("languages", "")),
        "education": temp_data.get("education", existing_cv.get("education", "")),
        "experience": temp_data.get("experience", existing_cv.get("experience", "")),
        "skills": temp_data.get("skills", existing_cv.get("skills", "")),
        "about": temp_data.get("about", existing_cv.get("about", "")),
        "contacts": temp_data.get("contacts", existing_cv.get("contacts", ""))
    }
    try:
        user = await get_user(callback.from_user.id)
        user_name = user.get("name", "") if user else ""
        name_parts = user_name.split()
        user_name_safe = "_".join(name_parts) if name_parts else f"user_{callback.from_user.id}"
    except Exception as e:
        user_name = f"user_{callback.from_user.id}"
        user_name_safe = user_name
    pdf_path = f"cv_{user_name_safe}.pdf"

    try:
        image = Image.open("templates/cv_template.png").convert("RGB")
        draw = ImageDraw.Draw(image)
        font_text = ImageFont.truetype("fonts/Nunito-Regular.ttf", 16)
        font_title = ImageFont.truetype("fonts/Exo2-Regular.ttf", 40)

        max_width_pixels = 350
        x_position = 320
        y_position = 60

        y_position = draw_wrapped_text(
            draw, user_name, font=font_title, fill="#111A94",
            x=x_position, y=y_position, max_width_pixels=max_width_pixels, line_spacing=10
        )
        y_position += 30

        fields = [
            ("–ë–∞–∂–∞–Ω–∞ –ø–æ—Å–∞–¥–∞:", updated_cv['position']),
            ("–í–æ–ª–æ–¥—ñ–Ω–Ω—è –º–æ–≤–∞–º–∏:", updated_cv['languages']),
            ("–û—Å–≤—ñ—Ç–∞:", updated_cv['education']),
            ("–î–æ—Å–≤—ñ–¥:", updated_cv['experience']),
            ("–ù–∞–≤–∏—á–∫–∏:", updated_cv['skills']),
            ("–ü—Ä–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞:", updated_cv['about']),
            ("–ö–æ–Ω—Ç–∞–∫—Ç–∏:", updated_cv['contacts'])
        ]

        for label, content in fields:
            y_position = draw_wrapped_text(
                draw, label, font=font_text, fill="#111A94",
                x=x_position, y=y_position, max_width_pixels=max_width_pixels, line_spacing=10
            )
            y_position += 10
            y_position = draw_wrapped_text(
                draw, content, font=font_text, fill="#000000",
                x=x_position + 10, y=y_position, max_width_pixels=max_width_pixels - 10, line_spacing=10
            )
            y_position += 20

        image.save(pdf_path, "PDF")

        with open(pdf_path, "rb") as pdf_file:
            file_bytes = pdf_file.read()
            document = BufferedInputFile(file=file_bytes, filename=f"CV_{user_name_safe}.pdf")
            doc = await callback.message.answer_document(document)
            file_id = doc.document.file_id

        await add_cv(
            user_id=callback.from_user.id,
            position=updated_cv["position"],
            languages=updated_cv["languages"],
            education=updated_cv["education"],
            experience=updated_cv["experience"],
            skills=updated_cv["skills"],
            about=updated_cv["about"],
            contacts=updated_cv["contacts"],
            cv_file_path=file_id
        )
    except Exception as e:
        await callback.message.answer("‚ùó –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è PDF. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ.")
        return
    finally:
        if os.path.exists(pdf_path):
            os.remove(pdf_path)

    await callback.message.answer("–ó–º—ñ–Ω–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ! –¢–≤–æ—î —Ä–µ–∑—é–º–µ –æ–Ω–æ–≤–ª–µ–Ω–æ —Ç–∞ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –≤ —á–∞—Ç.", reply_markup=main_menu_kb())
    await state.clear()