from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton, InputFile
from aiogram.fsm.state import State, StatesGroup
from utils.database import get_user, add_cv
from keyboards.cv_kb import get_cv_type_kb
from keyboards.main_menu_kb import main_menu_kb
from PIL import Image, ImageDraw, ImageFont
import os
import re
import textwrap
from aiogram.types import BufferedInputFile

cv_router = Router()


class CVStates(StatesGroup):# –∫–ª–∞—Å –¥–ª—è –∑–±–æ—Ä—É –¥–∞–Ω–∏—Ö –ø—Ä–∏ –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—ñ cv 
    position = State()
    languages = State()
    education = State()
    experience = State()
    skills = State()
    contacts = State()
    about = State()
    confirmation = State()


@cv_router.message(F.text == "üìÇ CV") # –∫–Ω–æ–ø–∫–∞ –∑ –≥–æ–ª–æ–≤–Ω–æ—ó –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
async def start_cv_menu(message: types.Message):
    await message.answer(
        "–ö–æ–º–ø–∞–Ω—ñ—ó —à—É–∫–∞—é—Ç—å —Ä—ñ–∑–Ω–∏—Ö —Å–ø–µ—Ü—ñ–∞–ª—ñ—Å—Ç—ñ–≤ —Å–∞–º–µ —Å–µ—Ä–µ–¥ —É—á–∞—Å–Ω–∏–∫—ñ–≤ –Ø—Ä–º–∞—Ä–∫—É!\n"
        "–¢–æ–∂ –∑–∞–≤–∞–Ω—Ç–∞–∂—É–π —Å–≤–æ—î —Ä–µ–∑—é–º–µ —É —Ñ–æ—Ä–º–∞—Ç—ñ PDF –∞–±–æ —Å—Ç–≤–æ—Ä–∏ –π–æ–≥–æ —Ç—É—Ç –∑–∞ –∫—ñ–ª—å–∫–∞ —Ö–≤–∏–ª–∏–Ω!",
        reply_markup=get_cv_type_kb()
    )


@cv_router.message(F.text == "–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Å–≤–æ—î —Ä–µ–∑—é–º–µ") # –∫–Ω–æ–ø–∫–∞ –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ —Å—ñ–≤—ñ—à–æ–∫
async def ask_cv_file(message: types.Message):
    await message.answer(
        "–ó–∞–≤–∞–Ω—Ç–∞–∂ —Å–≤–æ—î CV —É —Ñ–æ—Ä–º–∞—Ç—ñ PDF, —ñ –º–∏ –∑–±–µ—Ä–µ–∂–µ–º–æ –π–æ–≥–æ –¥–ª—è —Ç–µ–±–µ!",
        reply_markup=ReplyKeyboardRemove()
    )


@cv_router.message(F.document)
async def handle_cv_file(message: types.Message):
    if message.document.mime_type != "application/pdf":
        await message.answer("‚ùó –£–ø—Å, —Å—Ö–æ–∂–µ, —â–æ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª—É –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑,–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ pdf —Ñ–æ—Ä–º–∞—Ç.")
        return

    max_file_size = 10 * 1024 * 1024  # 10 –ú–ë 
    if message.document.file_size > max_file_size:
        await message.answer("–£–ø—Åü•≤. –°—Ö–æ–∂–µ, —Ñ–∞–π–ª –∑–∞–≤–µ–ª–∏–∫–∏–π –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è. –ô–æ–≥–æ —Ä–æ–∑–º—ñ—Ä –º–∞—î –±—É—Ç–∏ –Ω–µ –±—ñ–ª—å—à–∏–º 10 –ú–ë. –°–ø—Ä–æ–±—É–π –∑–º–µ–Ω—à–∏—Ç–∏ –≤–∞–≥—É —Ñ–∞–π–ª—É –π –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —â–µ —Ä–∞–∑!")
        return

    try:
        file_id = message.document.file_id
        file = await message.bot.get_file(file_id)
        await message.bot.download_file(file.file_path, timeout=30)  # –û–±–º–µ–∂–µ–Ω–Ω—è —á–∞—Å—É –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤ 30 —Å–µ–∫—É–Ω–¥
    except Exception as e:
        await message.answer("üïí –§–∞–π–ª –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î—Ç—å—Å—è –¥—É–∂–µ –¥–æ–≤–≥–æ‚Ä¶ –ú–æ–∂–ª–∏–≤–æ, –≤—ñ–Ω –ø–µ—Ä–µ–≤–∏—â—É—î –¥–æ–∑–≤–æ–ª–µ–Ω–∏–π —Ä–æ–∑–º—ñ—Ä —É 10 –ú–ë. –ü–µ—Ä–µ–≤—ñ—Ä, –±—É–¥—å –ª–∞—Å–∫–∞, —ñ —Å–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑!")
        return

    await add_cv(message.from_user.id, cv_file_path=file_id)
    await message.answer("‚úÖ CV –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ! üéâ", reply_markup=main_menu_kb())


@cv_router.message(F.text == "–°—Ç–≤–æ—Ä–∏—Ç–∏ —Ä–µ–∑—é–º–µ —Ä–∞–∑–æ–º") # –∫–Ω–æ–ø–∫–∞ –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ —Å—ñ–≤—ñ—à–æ–∫
async def cmd_start(message: types.Message, state: FSMContext):
    await state.clear()
    await state.set_state(CVStates.position)
    await message.answer("–¢–æ–∂ –ø–æ—á–Ω—ñ–º–æ, —è–∫–∞ –ø–æ—Å–∞–¥–∞ –∞–±–æ –Ω–∞–ø—Ä—è–º —Ç–µ–±–µ —Ü—ñ–∫–∞–≤–∏—Ç—å? –ù–∞–ø—Ä–∏–∫–ª–∞–¥: —Å—Ç–∞–∂—É–≤–∞–Ω–Ω—è –≤ —Å—Ñ–µ—Ä—ñ Data Science, —Ä–æ–±–æ—Ç–∞ —ñ–Ω–∂–µ–Ω–µ—Ä–æ–º-–ø—Ä–æ—î–∫—Ç—É–≤–∞–ª—å–Ω–∏–∫–æ–º —Ç–æ—â–æ.", reply_markup=ReplyKeyboardRemove())


@cv_router.message(CVStates.position) # –ø–∏—Ç–∞–Ω–Ω—è —Å—Ç—É–¥—ñ–∫—ñ–≤
async def process_position(message: types.Message, state: FSMContext):
    await state.update_data(position=message.text)
    await state.set_state(CVStates.languages)
    await message.answer("–Ø–∫–∏–º–∏ –º–æ–≤–∞–º–∏ —Ç–∏ –≤–æ–ª–æ–¥—ñ—î—à. –í–∫–∞–∂–∏ —Ä—ñ–≤–µ–Ω—å –≤–æ–ª–æ–¥—ñ–Ω–Ω—è –¥–ª—è –∫–æ–∂–Ω–æ—ó –º–æ–≤–∏. –ù–∞–ø—Ä–∏–∫–ª–∞–¥: —É–∫—Ä–∞—ó–Ω—Å—å–∫–∞ ‚Äî —Ä—ñ–¥–Ω–∞, –∞–Ω–≥–ª—ñ–π—Å—å–∫–∞ ‚Äî B2.")


@cv_router.message(CVStates.languages)
async def process_languages(message: types.Message, state: FSMContext):

    VALID_LEVELS = {"A1", "A2", "B1", "B2", "C1", "C2"}
    text = message.text.lower()
    levels_found = re.findall(r'\b([a-cA-C][1-2])\b', message.text)
    levels_found_upper = [level.upper() for level in levels_found]

    has_native = "—Ä—ñ–¥–Ω–∞" in text
    has_valid_level = any(level in VALID_LEVELS for level in levels_found_upper)
    invalid_levels = [level for level in levels_found_upper if level not in VALID_LEVELS]

    if not has_native and not levels_found:
        await message.answer(
            "‚ö†Ô∏è –°—Ö–æ–∂–µ, —â–æ —Ç–∏ –Ω–µ –≤–∫–∞–∑–∞–≤(-–ª–∞) —Ä—ñ–≤–µ–Ω—å –≤–æ–ª–æ–¥—ñ–Ω–Ω—è –º–æ–≤–∞–º–∏.\n"
            "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –∞–±–æ —Å–ª–æ–≤–æ ¬´—Ä—ñ–¥–Ω–∞¬ª, –∞–±–æ —Ä—ñ–≤–Ω—ñ A1, A2, B1, B2, C1, C2.\n"
            "–ù–∞–ø—Ä–∏–∫–ª–∞–¥:\n"
            "‚Äî —É–∫—Ä–∞—ó–Ω—Å—å–∫–∞ ‚Äî —Ä—ñ–¥–Ω–∞\n"
            "‚Äî –∞–Ω–≥–ª—ñ–π—Å—å–∫–∞ ‚Äî B2"
        )
        return

    if invalid_levels:
        await message.answer(
            f"‚ö†Ô∏è –í–∏—è–≤–ª–µ–Ω–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ñ —Ä—ñ–≤–Ω—ñ: {', '.join(invalid_levels)}.\n"
            f"–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –ª–∏—à–µ —Ü—ñ —Ä—ñ–≤–Ω—ñ: A1, A2, B1, B2, C1, C2 –∞–±–æ —Å–ª–æ–≤–æ ¬´—Ä—ñ–¥–Ω–∞¬ª.\n"
            "–ù–∞–ø—Ä–∏–∫–ª–∞–¥:\n"
            "‚Äî —É–∫—Ä–∞—ó–Ω—Å—å–∫–∞ ‚Äî —Ä—ñ–¥–Ω–∞\n"
            "‚Äî –∞–Ω–≥–ª—ñ–π—Å—å–∫–∞ ‚Äî B2"
        )
        return

    if not has_native and not has_valid_level:
        # –Ø–∫—â–æ –Ω–µ–º–∞ —Å–ª–æ–≤–∞ "—Ä—ñ–¥–Ω–∞" —ñ –Ω–µ–º–∞ –∂–æ–¥–Ω–æ–≥–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ä—ñ–≤–Ω—è
        await message.answer(
            "‚ö†Ô∏è –¢–∏ –≤–∫–∞–∑–∞–≤(-–ª–∞) —Ä—ñ–≤–µ–Ω—å, –∞–ª–µ –≤—ñ–Ω –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π.\n"
            "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –ª–∏—à–µ —Ü—ñ —Ä—ñ–≤–Ω—ñ: A1, A2, B1, B2, C1, C2 –∞–±–æ —Å–ª–æ–≤–æ ¬´—Ä—ñ–¥–Ω–∞¬ª.\n"
            "–ù–∞–ø—Ä–∏–∫–ª–∞–¥:\n"
            "‚Äî —É–∫—Ä–∞—ó–Ω—Å—å–∫–∞ ‚Äî —Ä—ñ–¥–Ω–∞\n"
            "‚Äî –∞–Ω–≥–ª—ñ–π—Å—å–∫–∞ ‚Äî B2"
        )
        return

    # –Ø–∫—â–æ –≤—Å–µ –¥–æ–±—Ä–µ
    await state.update_data(languages=message.text)
    await state.set_state(CVStates.about)
    await message.answer(
        "–†–æ–∑–∫–∞–∂–∏ –∫–æ—Ä–æ—Ç–∫–æ –ø—Ä–æ —Å–µ–±–µ. –ß–∏–º —Ü—ñ–∫–∞–≤–∏—à—Å—è, —è–∫—É —Å—Ñ–µ—Ä—É —Ä–æ–∑–≥–ª—è–¥–∞—î—à, —á–æ–º—É —Ö–æ—á–µ—à –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –≤ –æ–±—Ä–∞–Ω–æ–º—É –Ω–∞–ø—Ä—è–º–∫—É."
    )



@cv_router.message(CVStates.about)
async def process_languages(message: types.Message, state: FSMContext):
    await state.update_data(about=message.text)
    await state.set_state(CVStates.education)
    await message.answer("–ù–µ –∑–∞–±—É–≤–∞–π–º–æ —ñ –ø—Ä–æ –æ—Å–≤—ñ—Ç—É! –í–∫–∞–∂–∏ —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç —Ç–∞ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ—Å—Ç—å –Ω–∞ —è–∫—ñ–π –Ω–∞–≤—á–∞—î—à—Å—è. –Ø–∫—â–æ –º–æ–∂–µ—à –ø–æ—Ö–≤–∞–ª–∏—Ç–∏—Å—å –ø—Ä–æ–π–¥–µ–Ω–∏–º–∏ –∫—É—Ä—Å–∞–º–∏, —Ç–æ–¥—ñ –æ–±–æ–≤ º—è–∑–∫–æ–≤–æ —Ü–µ –∑—Ä–æ–±–∏!")


@cv_router.message(CVStates.education)
async def process_experience(message: types.Message, state: FSMContext):
    await state.update_data(education=message.text)
    await state.set_state(CVStates.skills)
    await message.answer("–Ø–∫–∏–º–∏ –Ω–∞–≤–∏—á–∫–∞–º–∏ —Ç–∏ –≤–æ–ª–æ–¥—ñ—î—à. –¢–µ—Ö–Ω—ñ—á–Ω—ñ –Ω–∞–≤–∏—á–∫–∏, —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏, –ø—Ä–æ–≥—Ä–∞–º–∏, –∞ —Ç–∞–∫–æ–∂ –æ—Å–æ–±–∏—Å—Ç—ñ —è–∫–æ—Å—Ç—ñ, —è–∫—ñ —Ç–æ–±—ñ –¥–æ–ø–æ–º–∞–≥–∞—é—Ç—å —É —Ä–æ–±–æ—Ç—ñ.")


@cv_router.message(CVStates.skills)
async def process_education(message: types.Message, state: FSMContext):
    await state.update_data(skills=message.text)
    await state.set_state(CVStates.experience)
    await message.answer("–ú–∞—î—à –¥–æ—Å–≤—ñ–¥ —Ä–æ–±–æ—Ç–∏ –∞–±–æ –ø—Ä–∞–∫—Ç–∏–∫–∏? –Ø–∫—â–æ —Ç–∞–∫, –∫–æ—Ä–æ—Ç–∫–æ –æ–ø–∏—à–∏ –ø–æ—Å–∞–¥—É, –æ–±–æ–≤'—è–∑–∫–∏ —Ç–∞ –ø–µ—Ä—ñ–æ–¥. –Ø–∫—â–æ –¥–æ—Å–≤—ñ–¥—É –Ω–µ–º–∞—î ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ ¬´–ù–Ü¬ª.")



@cv_router.message(CVStates.experience)
async def process_skills(message: types.Message, state: FSMContext):
    await state.update_data(experience=message.text)
    await state.set_state(CVStates.contacts)
    await message.answer("–Ü –æ—Å—Ç–∞–Ω–Ω—î –∑–∞–ª–∏—à —Å–≤–æ—ó –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ñ –¥–∞–Ω—ñ! Email —Ç–∞ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É, —â–æ–± —Ä–æ–±–æ—Ç–æ–¥–∞–≤—Ü—ñ –º–æ–≥–ª–∏ –∑ —Ç–æ–±–æ—é –∑–≤'—è–∑–∞—Ç–∏—Å—è.")


@cv_router.message(CVStates.contacts)
async def process_contacts(message: types.Message, state: FSMContext):
    await state.update_data(contacts=message.text)
    data = await state.get_data()

    user = await get_user(message.from_user.id)
    user_name = user.get("name", "") if user else ""

    summary = (
        f"–Ü–º'—è: {user_name}\n"
        f"–ü–æ—Å–∞–¥–∞: {data['position']}\n"
        f"–ú–æ–≤–∏: {data['languages']}\n"
        f"–û—Å–≤—ñ—Ç–∞: {data['education']}\n"
        f"–î–æ—Å–≤—ñ–¥: {data['experience']}\n"
        f"–ù–∞–≤–∏—á–∫–∏: {data['skills']}\n"
        f"–ö–æ–Ω—Ç–∞–∫—Ç–∏: {data['contacts']}\n\n"
        "–í—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ?"
    )

    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–¢–∞–∫"), KeyboardButton(text="–ù—ñ")]],
        resize_keyboard=True
    )
    await message.answer(summary, reply_markup=keyboard)
    await state.set_state(CVStates.confirmation)

from utils.database import get_user, add_cv

@cv_router.message(CVStates.confirmation, F.text.casefold() == "—Ç–∞–∫")
async def process_confirm_yes(message: types.Message, state: FSMContext):
    data = await state.get_data()
    try:
        user = await get_user(message.from_user.id)
        user_name = user.get("name", "") if user else ""
    except Exception as e:
        user_name = ""

    image = Image.open("templates/cv_template.png").convert("RGB")
    draw = ImageDraw.Draw(image)
    font_text = ImageFont.truetype("fonts/Nunito-Regular.ttf", 14)
    font_title = ImageFont.truetype("fonts/Exo2-Regular.ttf", 36)

    def draw_wrapped_text(draw, text, font, fill, x, y, max_width):
        lines = textwrap.wrap(text, width=max_width)
        line_height = font.getbbox("A")[1] 
        for line in lines:
            draw.text((x, y), line, font=font, fill=fill)
            y += line_height 

    draw_wrapped_text(draw, f"{user_name}", font=font_title, fill="#111A94", x=300, y=70, max_width=40)
    draw_wrapped_text(draw, f"–ë–∞–∂–∞–Ω–∞ –ø–æ—Å–∞–¥–∞:\n {data['position']}", font=font_text, fill="#111A94", x=300, y=220, max_width=100)
    draw_wrapped_text(draw, f"–í–æ–ª–æ–¥—ñ–Ω–Ω—è –º–æ–≤–∞–º–∏:\n{data['languages']}", font=font_text, fill="#111A94", x=300, y=320, max_width=100)
    draw_wrapped_text(draw, f"–û—Å–≤—ñ—Ç–∞:\n{data['education']}", font=font_text, fill="#111A94", x=300, y=420, max_width=100)
    draw_wrapped_text(draw, f"–î–æ—Å–≤—ñ–¥:\n{data['experience']}", font=font_text, fill="#111A94", x=300, y=520, max_width=100)
    draw_wrapped_text(draw, f"–ù–∞–≤–∏—á–∫–∏:\n{data['skills']}", font=font_text, fill="#111A94", x=300, y=620, max_width=100)
    draw_wrapped_text(draw, f"–ü—Ä–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞:\n{data['about']}", font=font_text, fill="#111A94", x=300, y=720, max_width=100)
    draw_wrapped_text(draw, f"–ö–æ–Ω—Ç–∞–∫—Ç–∏:\n{data['contacts']}", font=font_text, fill="#111A94", x=300, y=820, max_width=100)

    pdf_path = f"cv_{message.from_user.id}.pdf"
    image.save(pdf_path, "PDF")

    with open(pdf_path, "rb") as pdf_file:
        file_bytes = pdf_file.read()
        document = BufferedInputFile(file=file_bytes, filename=f"CV_{message.from_user.id}.pdf")
        doc = await message.answer_document(document)
        file_id = doc.document.file_id


    await add_cv(message.from_user.id, cv_file_path=file_id) 

    os.remove(pdf_path)

    await message.answer("–í—ñ—Ç–∞—î–º–æ! –¢–≤–æ—î —Ä–µ–∑—é–º–µ –≥–æ—Ç–æ–≤–µ. –¢–µ–ø–µ—Ä –π–æ–≥–æ –ø–æ–±–∞—á–∞—Ç—å —Ä–æ–±–æ—Ç–æ–¥–∞–≤—Ü—ñ.", reply_markup=main_menu_kb())
    await state.clear()

@cv_router.message(CVStates.confirmation, F.text.casefold() == "–Ω—ñ")
async def process_confirm_no(message: types.Message, state: FSMContext):
    await state.clear()
    await state.set_state(CVStates.position)
    await message.answer("–ì–∞—Ä–∞–∑–¥, –¥–∞–≤–∞–π —Å–ø—Ä–æ–±—É—î–º–æ —â–µ —Ä–∞–∑. –Ø–∫–∞ –ø–æ—Å–∞–¥–∞ –∞–±–æ –Ω–∞–ø—Ä—è–º —Ç–µ–±–µ —Ü—ñ–∫–∞–≤–∏—Ç—å? –ù–∞–ø—Ä–∏–∫–ª–∞–¥: —Å—Ç–∞–∂—É–≤–∞–Ω–Ω—è –≤ —Å—Ñ–µ—Ä—ñ Data Science, —Ä–æ–±–æ—Ç–∞ —ñ–Ω–∂–µ–Ω–µ—Ä–æ–º-–ø—Ä–æ—î–∫—Ç—É–≤–∞–ª—å–Ω–∏–∫–æ–º —Ç–æ—â–æ.", reply_markup=ReplyKeyboardRemove())


@cv_router.message(F.text == "–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ –±–ª–æ–∫—ñ–≤") # –∫–Ω–æ–ø–∫–∞ –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ —Å—ñ–≤—ñ—à–æ–∫
async def back_to_menu(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –±–ª–æ–∫—ñ–≤!", reply_markup=main_menu_kb())
