from aiogram import Router, types, F
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardRemove, KeyboardButton, ReplyKeyboardMarkup
from utils.database import add_cv

router = Router()

class CVForm(StatesGroup):
    name = State()
    contact = State()
    education = State()
    experience = State()
    skills = State()
    about = State()
    confirm = State()

@router.message(F.text == "üìù –°—Ç–≤–æ—Ä–∏—Ç–∏ —Ä–µ–∑—é–º–µ")
async def start_cv_form(message: types.Message, state: FSMContext):
    await message.answer(
        "–ü—Ä–∏–≤—ñ—Ç! –©–æ–± —è –º—ñ–≥(–ª–∞) —Å—Ç–≤–æ—Ä–∏—Ç–∏ –¥–ª—è –≤–∞—Å –≥–∞—Ä–Ω–µ —Ä–µ–∑—é–º–µ, –º–µ–Ω—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∫—ñ–ª—å–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π. –í—Å–µ –ø—Ä–æ—Å—Ç–æ üòä\n\n"
        "üîπ –í–∞—à–µ –ø–æ–≤–Ω–µ —ñ–º‚Äô—è (—É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é —Ç–∞ –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—é, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ)\n"
        "üîπ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É\n"
        "üîπ –ï–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞ –ø–æ—à—Ç–∞ (—è–∫—â–æ –º–∞—î—Ç–µ)\n"
        "üîπ –ú—ñ—Å—Ç–æ –ø—Ä–æ–∂–∏–≤–∞–Ω–Ω—è\n"
        "üîπ –Ø–∫—É –ø–æ—Å–∞–¥—É –∞–±–æ —è–∫—É —Å—Ñ–µ—Ä—É —Ä–æ–±–æ—Ç–∏ –≤–∏ —à—É–∫–∞—î—Ç–µ?"
    )
    await state.set_state(CVForm.name)

@router.message(CVForm.name)
async def get_name_contact(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer(
        "–î—è–∫—É—é! –¢–µ–ø–µ—Ä –ø—Ä–æ –≤–∞—à—É –æ—Å–≤—ñ—Ç—É:\n\n"
        "üéì –ù–∞–∑–≤–∞ –Ω–∞–≤—á–∞–ª—å–Ω–æ–≥–æ –∑–∞–∫–ª–∞–¥—É\n"
        "üìò –°–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ—Å—Ç—å\n"
        "üìÖ –†–æ–∫–∏ –Ω–∞–≤—á–∞–Ω–Ω—è (–≤—ñ–¥ - –¥–æ)\n"
        "‚úÖ –Ø–∫—â–æ –º–∞—î—Ç–µ —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç–∏ –∞–±–æ –ø—Ä–æ–π—à–ª–∏ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –∫—É—Ä—Å–∏ ‚Äî –Ω–∞–ø–∏—à—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, —Ç–µ–∂"
    )
    await state.set_state(CVForm.education)

@router.message(CVForm.education)
async def get_education(message: types.Message, state: FSMContext):
    await state.update_data(education=message.text)
    await message.answer(
        "–ß—É–¥–æ–≤–æ, –¥–∞–ª—ñ —Ç—Ä–æ—Ö–∏ –ø—Ä–æ –¥–æ—Å–≤—ñ–¥:\n\n"
        "üíº –î–µ –≤–∏ –ø—Ä–∞—Ü—é–≤–∞–ª–∏ —Ä–∞–Ω—ñ—à–µ (—è–∫—â–æ –º–∞—î—Ç–µ –¥–æ—Å–≤—ñ–¥)? –ù–∞–ø–∏—à—ñ—Ç—å:\n"
        "üîπ –ù–∞–∑–≤—É –∫–æ–º–ø–∞–Ω—ñ—ó\n"
        "üîπ –ü–æ—Å–∞–¥—É\n"
        "üîπ –†–æ–∫–∏ —Ä–æ–±–æ—Ç–∏\n"
        "üîπ –©–æ –≤–∏ —Ä–æ–±–∏–ª–∏ / —è–∫—ñ –±—É–ª–∏ –æ–±–æ–≤‚Äô—è–∑–∫–∏"
    )
    await state.set_state(CVForm.experience)

@router.message(CVForm.experience)
async def get_experience(message: types.Message, state: FSMContext):
    await state.update_data(experience=message.text)
    await message.answer(
        "–°—É–ø–µ—Ä! –ê —Ç–µ–ø–µ—Ä –ø—Ä–æ –≤–∞—à—ñ –Ω–∞–≤–∏—á–∫–∏:\n\n"
        "üõ†Ô∏è –Ø–∫–∏–º–∏ –ø—Ä–æ–≥—Ä–∞–º–∞–º–∏ –∞–±–æ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏ –≤–º—ñ—î—Ç–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è?\n"
        "üåê –ó–Ω–∞–Ω–Ω—è –º–æ–≤ ‚Äî —è–∫—ñ —ñ –Ω–∞ —è–∫–æ–º—É —Ä—ñ–≤–Ω—ñ?\n"
        "ü§π‚Äç‚ôÇÔ∏è –Ø–∫—ñ —â–µ –∫–æ—Ä–∏—Å–Ω—ñ –Ω–∞–≤–∏—á–∫–∏ –º–∞—î—Ç–µ?"
    )
    await state.set_state(CVForm.skills)

@router.message(CVForm.skills)
async def get_skills(message: types.Message, state: FSMContext):
    await state.update_data(skills=message.text)
    await message.answer(
        "–Ü –æ—Å—Ç–∞–Ω–Ω—î ‚Äî —Ç—Ä–æ—Ö–∏ –ø—Ä–æ –≤–∞—Å –æ—Å–æ–±–∏—Å—Ç–æ üòä\n\n"
        "üë§ –û–ø–∏—à—ñ—Ç—å —Å–µ–±–µ —è–∫ –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞ (—Å–∏–ª—å–Ω—ñ —Å—Ç–æ—Ä–æ–Ω–∏)\n"
        "‚è∞ –Ø–∫–∏–π –≥—Ä–∞—Ñ—ñ–∫ –≤–∞–º –ø—ñ–¥—Ö–æ–¥–∏—Ç—å?"
    )
    await state.set_state(CVForm.about)

@router.message(CVForm.about)
async def confirm_cv(message: types.Message, state: FSMContext):
    await state.update_data(about=message.text)
    data = await state.get_data()

    preview = (
        f"üßæ –û—Å—å –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–µ —Ä–µ–∑—é–º–µ:\n\n"
        f"üë§ –Ü–º‚Äô—è: {data['name']}\n"
        f"üéì –û—Å–≤—ñ—Ç–∞: {data['education']}\n"
        f"üíº –î–æ—Å–≤—ñ–¥: {data['experience']}\n"
        f"üõ†Ô∏è –ù–∞–≤–∏—á–∫–∏: {data['skills']}\n"
        f"üìÑ –ü—Ä–æ —Å–µ–±–µ: {data['about']}"
    )

    await message.answer(preview)
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚úÖ –í—Å–µ –æ–∫–µ–π"), KeyboardButton(text="üîÅ –ó–∞–ø–æ–≤–Ω–∏—Ç–∏ –Ω–∞–Ω–æ–≤–æ")]
        ],
        resize_keyboard=True
    )
    await message.answer("–í—Å–µ –≤—ñ—Ä–Ω–æ? ü§î", reply_markup=keyboard)
    await state.set_state(CVForm.confirm)

@router.message(CVForm.confirm)
async def finish_cv(message: types.Message, state: FSMContext):
    if message.text == "‚úÖ –í—Å–µ –æ–∫–µ–π":
        data = await state.get_data()
        user_id = message.from_user.id
        final_text = (
            f"üë§ –Ü–º‚Äô—è: {data['name']}\n"
            f"üéì –û—Å–≤—ñ—Ç–∞: {data['education']}\n"
            f"üíº –î–æ—Å–≤—ñ–¥: {data['experience']}\n"
            f"üõ†Ô∏è –ù–∞–≤–∏—á–∫–∏: {data['skills']}\n"
            f"üìÑ –ü—Ä–æ —Å–µ–±–µ: {data['about']}"
        )
        await add_cv(user_id=user_id, cv_text=final_text)
        await message.answer("‚úÖ –ì–æ—Ç–æ–≤–æ! –ú–∏ –∑–±–µ—Ä–µ–≥–ª–∏ —Ç–≤–æ—î —Ä–µ–∑—é–º–µ üßæ", reply_markup=ReplyKeyboardRemove())
        await state.clear()
    elif message.text == "üîÅ –ó–∞–ø–æ–≤–Ω–∏—Ç–∏ –Ω–∞–Ω–æ–≤–æ":
        await message.answer("–û–∫–µ–π, –ø–æ—á–Ω–µ–º–æ —Å–ø–æ—á–∞—Ç–∫—É. –í–≤–µ–¥–∏ —Å–≤–æ—î —ñ–º‚Äô—è —Ç–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∏:", reply_markup=ReplyKeyboardRemove())
        await state.set_state(CVForm.name)
