from aiogram import Router, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.exceptions import TelegramAPIError
from dotenv import load_dotenv
import asyncio
import os
import json
from aiogram.types import ReplyKeyboardRemove, FSInputFile
from keyboards.main_menu_kb import main_menu_kb 
from utils.database import get_all_users, cv_collection, db, count_all_users 

load_dotenv()
ADMIN = os.getenv("ADMIN")

router = Router()

class BroadcastStates(StatesGroup):
    enter_broadcast_text = State()
    confirm_broadcast = State()

class FeedbackStates(StatesGroup):
    waiting_for_comment = State()

def admin_inline_kb():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–†–æ–∑—Å–∏–ª–∫–∞ –≤—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º", callback_data="broadcast")],
            [InlineKeyboardButton(text="–û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ CV –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤", callback_data="get_cvs")],
            [InlineKeyboardButton(text="–†–æ–∑—Å–∏–ª–∫–∞ –¥–ª—è –≤—ñ–¥–≥—É–∫—ñ–≤", callback_data="get_feedback")],
            [InlineKeyboardButton(text="–†–æ–∑—Å–∏–ª–∫–∞ –∑–±–æ—Ä—É", callback_data="zbir_brodcast")],
            [InlineKeyboardButton(text="–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤", callback_data="count_users")],
        ]
    )

@router.callback_query(F.data == "count_users")
async def count_users_callback(callback: CallbackQuery):
    count = await count_all_users()
    await callback.message.answer(f"‚úÖ –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {count}")

def confirm_broadcast_kb():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –¢–∞–∫, —Ä–æ–∑—ñ—Å–ª–∞—Ç–∏", callback_data="confirm_broadcast")],
            [InlineKeyboardButton(text="‚ùå –ù—ñ, —Å–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel_broadcast")],
        ]
    )

@router.message(F.text == ADMIN)
async def admin_message_handler(message: Message):
    await message.answer(
        "–ü—Ä–∏–≤—ñ—Ç, –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä-–º–æ–ª–æ–¥—á–∏–Ω–∫–∞! –û—Å—å —Ç–≤–æ—ó –æ–ø—Ü—ñ—ó:",
        reply_markup=admin_inline_kb()
    )

@router.callback_query(F.data == "broadcast")
async def broadcast_callback(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer(
        "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏. "
        "–Ø–∫—â–æ —Ö–æ—á–µ—Ç–µ –¥–æ–¥–∞—Ç–∏ —Ñ–æ—Ç–æ, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –π–æ–≥–æ —Ä–∞–∑–æ–º —ñ–∑ —Ç–µ–∫—Å—Ç–æ–º —É –ø—ñ–¥–ø–∏—Å—ñ."
    )
    await state.set_state(BroadcastStates.enter_broadcast_text)

@router.message(BroadcastStates.enter_broadcast_text, F.content_type.in_({"text", "photo"}))
async def enter_broadcast_text(message: Message, state: FSMContext):
    
    text_to_broadcast = message.caption or message.text or ""
    photo_id = message.photo[-1].file_id if message.photo else None

    await state.update_data(broadcast_text=text_to_broadcast, photo_id=photo_id)

    preview_text = f"–û—Å—å –≤–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏:\n\n{text_to_broadcast or '–ë–µ–∑ —Ç–µ–∫—Å—Ç—É'}\n\n–í–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î—Ç–µ —Ä–æ–∑—Å–∏–ª–∫—É —Ü—å–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º?"
    
    if photo_id:
        await message.answer_photo(
            photo=photo_id,
            caption=preview_text,
            reply_markup=confirm_broadcast_kb(),
            parse_mode="HTML"
        )
    else:
        await message.answer(
            preview_text,
            reply_markup=confirm_broadcast_kb(),
            parse_mode="HTML"
        )

    await state.set_state(BroadcastStates.confirm_broadcast)

@router.callback_query(F.data == "confirm_broadcast", BroadcastStates.confirm_broadcast)
async def confirm_broadcast(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    text_to_broadcast = data.get("broadcast_text", "")
    photo_id = data.get("photo_id")

    users_cursor = await get_all_users()
    user_ids = []
    async for user in users_cursor:
        if user.get("registered"):
            user_ids.append(user["telegram_id"])

    success = 0
    fail = 0
    for user_id in user_ids:
        try:
            if photo_id:
                await callback.bot.send_photo(
                    chat_id=user_id,
                    photo=photo_id,
                    caption=text_to_broadcast,
                    parse_mode="HTML"
                )
            else:
                await callback.bot.send_message(
                    chat_id=user_id,
                    text=text_to_broadcast,
                    parse_mode="HTML"
                )
            success += 1
        except TelegramAPIError as e:
            fail += 1
            print(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –¥–æ {user_id}: {e}")
        await asyncio.sleep(0.05)

    await callback.message.answer(
        f"–†–æ–∑—Å–∏–ª–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n‚úÖ –£—Å–ø—ñ—à–Ω–æ: {success}\n‚ùå –ü–æ–º–∏–ª–∫–∏: {fail}"
    )
    await state.clear()

@router.callback_query(F.data == "cancel_broadcast", BroadcastStates.confirm_broadcast)
async def cancel_broadcast(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–†–æ–∑—Å–∏–ª–∫—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
    await state.clear()

def format_cv_text(cv_text) -> str:
    if isinstance(cv_text, str):
        try:
            cv_text = json.loads(cv_text)
        except Exception:
            return f"<i>–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç CV:</i> {cv_text}"

    formatted = ""
    for key, value in cv_text.items():
        title = key.replace('_', ' ').capitalize()
        formatted += f"<b>{title}:</b> {value}\n"
    return formatted.strip()

@router.callback_query(F.data == "get_cvs")
async def get_cvs_callback(callback: CallbackQuery):
    await callback.message.answer("–ó–±–∏—Ä–∞—é –≤—Å—ñ CV –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤...")

    cursor = cv_collection.find({})
    count = 0

    for cv in await cursor.to_list(length=None):
        user_id = cv.get("user_id")
        cv_file_path = cv.get("cv_file_path")

        if cv_file_path:
            try:
                file_info = await callback.bot.get_file(cv_file_path)
                file_url = f"https://api.telegram.org/file/bot{callback.bot.token}/{file_info.file_path}"

                await callback.message.answer(
                    f"<b>–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á ID:</b> <code>{cv.get('telegram_id')}</code>\n"
                    f"<b>–Ü–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:</b> {cv.get('user_name')}\n"
                    f"üìé <b>CV:</b> <a href='{file_url}'>–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ–∞–π–ª</a>",
                    parse_mode="HTML",
                    disable_web_page_preview=True)
            except Exception as e:
                await callback.message.answer(
                    f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ CV –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}.\n"
                    f"–ü–æ–º–∏–ª–∫–∞: <code>{e}</code>",
                    parse_mode="HTML"
                )
        else:
            await callback.message.answer(
                f"‚ùå CV –≤—ñ–¥—Å—É—Ç–Ω—î –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}.",
                parse_mode="HTML"
            )
        count += 1

    if count == 0:
        await callback.message.answer("‚ùå –ñ–æ–¥–Ω–æ–≥–æ CV –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
    else:
        await callback.message.answer(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ. –û–ø—Ä–∞—Ü—å–æ–≤–∞–Ω–æ {count} CV.")

def rating_keyboard():
    keyboard = [
        [InlineKeyboardButton(text=f"‚≠ê 1 ‚Äì –ù–µ —Å–ø–æ–¥–æ–±–∞–ª–æ—Å—å", callback_data="rate_1")],
        [InlineKeyboardButton(text=f"‚≠ê 2 ‚Äì –ú–æ–≥–ª–æ –±—É—Ç–∏ –∫—Ä–∞—â–µ", callback_data="rate_2")],
        [InlineKeyboardButton(text=f"‚≠ê 3 ‚Äì –ë—É–ª–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ", callback_data="rate_3")],
        [InlineKeyboardButton(text=f"‚≠ê 4 ‚Äì –ë—É–ª–æ –∫—Ä—É—Ç–æ!", callback_data="rate_4")],
        [InlineKeyboardButton(text=f"‚≠ê 5 ‚Äì –ù–µ–π–º–æ–≤—ñ—Ä–Ω–æ, —á–µ–∫–∞—é –Ω–∞—Å—Ç—É–ø–Ω–∏–π –Ü–Ø–ö!", callback_data="rate_5")],
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

@router.callback_query(F.data == "get_feedback")
async def broadcast_feedback_request(callback: CallbackQuery):
    confirm_kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –¢–∞–∫, —Ä–æ–∑—ñ—Å–ª–∞—Ç–∏", callback_data="confirm_feedback_request")],
        [InlineKeyboardButton(text="‚ùå –ù—ñ, —Å–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel_feedback_request")]
    ])
    await callback.message.answer(
        "–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ —Ä–æ–∑—ñ—Å–ª–∞—Ç–∏ –∑–∞–ø–∏—Ç –Ω–∞ —Ñ—ñ–¥–±–µ–∫ –≤—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º?",
        reply_markup=confirm_kb
    )

@router.callback_query(F.data == "confirm_feedback_request")
async def send_feedback_request(callback: CallbackQuery):
    await callback.message.answer("–†–æ–∑—Å–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—ñ–≤ –Ω–∞ —Ñ—ñ–¥–±–µ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º...")

    users_cursor = await get_all_users()
    user_ids = []
    async for user in users_cursor:
        if user.get("registered"):
            user_ids.append(user["telegram_id"])

    success = 0
    fail = 0
    for user_id in user_ids:
        try:
            await callback.bot.send_message(
                user_id,
                "–¶–µ –±—É–ª–∏ –¥–≤–∞ –Ω–µ–π–º–æ–≤—ñ—Ä–Ω—ñ –¥–Ω—ñ! –ú–∏ –Ω–∞–º–∞–≥–∞–ª–∏—Å—è –∑—Ä–æ–±–∏—Ç–∏ <b>–Ü–Ω–∂–µ–Ω–µ—Ä–Ω–∏–π –Ø—Ä–º–∞—Ä–æ–∫ –ö–∞—Ä º—î—Ä–∏</b> —è–∫–æ–º–æ–≥–∞ –∫–æ—Ä–∏—Å–Ω—ñ—à–∏–º —ñ —Ü—ñ–∫–∞–≤–∏—à–∏–º –¥–ª—è —Ç–µ–±–µ. –ê —Ç–µ–ø–µ—Ä —Ç–≤–æ—è —á–µ—Ä–≥–∞ –¥–æ–ø–æ–º–æ–≥—Ç–∏ –Ω–∞–º —Å—Ç–∞—Ç–∏ –∫—Ä–∞—â–∏–º–∏! –û—Ü—ñ–Ω–∏, –±—É–¥—å –ª–∞—Å–∫–∞, –∑–∞—Ö—ñ–¥ –≤—ñ–¥ 1 –¥–æ 5 üìä.",
                parse_mode="HTML",
                reply_markup=rating_keyboard()
            )
            success += 1
        except TelegramAPIError:
            fail += 1
            await asyncio.sleep(0.05)

    await callback.message.answer(f"‚úÖ –ó–∞–ø–∏—Ç –Ω–∞ —Ñ—ñ–¥–±–µ–∫ —Ä–æ–∑—ñ—Å–ª–∞–Ω–æ!\n–£—Å–ø—ñ—à–Ω–æ: {success}\n–ü–æ–º–∏–ª–∫–∏: {fail}")

@router.callback_query(F.data == "cancel_feedback_request")
async def cancel_feedback_request(callback: CallbackQuery):
    await callback.message.answer("‚ùå –†–æ–∑—Å–∏–ª–∫—É –∑–∞–ø–∏—Ç—ñ–≤ –Ω–∞ —Ñ—ñ–¥–±–µ–∫ —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")

@router.callback_query(F.data.startswith("rate_"))
async def handle_rating(callback: CallbackQuery, state: FSMContext):
    rating = int(callback.data.split("_")[1])
    await state.update_data(rating=rating)
    await callback.message.edit_text(
        f"üôè –î—è–∫—É—î–º–æ –∑–∞ –æ—Ü—ñ–Ω–∫—É!\n –ù–∞–º –¥—É–∂–µ –≤–∞–∂–ª–∏–≤–æ –ø–æ—á—É—Ç–∏ —Ç–≤–æ—é –¥—É–º–∫—É. –ù–∞–ø–∏—à–∏, —â–æ —Ç–æ–±—ñ —Å–ø–æ–¥–æ–±–∞–ª–æ—Å—å, –∞ —â–æ –º–æ–∂–Ω–∞ –ø–æ–∫—Ä–∞—â–∏—Ç–∏, –∞–¥–∂–µ —Å–∞–º–µ —Ç–≤—ñ–π –≤—ñ–¥–≥—É–∫ —Å–ø–æ–Ω—É–∫–∞—î –Ω–∞—Å –¥–æ —Ä–æ–∑–≤–∏—Ç–∫—É!",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(FeedbackStates.waiting_for_comment)

@router.message(FeedbackStates.waiting_for_comment)
async def save_feedback(message: Message, state: FSMContext):
    user_id = message.from_user.id
    comment = message.text
    data = await state.get_data()
    rating = data.get('rating')

    feedback_collection = db["feedbacks"]
    await feedback_collection.update_one(
        {"telegram_id": user_id},
        {"$set": {
            "telegram_id": user_id,
            "rating": rating,
            "comment": comment
        }},
        upsert=True
    )

    await message.answer(
        "–î—É–∂–µ –¥—è–∫—É—î–º–æ! –¢–≤–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –¥–æ–ø–æ–º–æ–∂—É—Ç—å –Ω–∞–º —Ä—É—Ö–∞—Ç–∏—Å—è —É –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É –Ω–∞–ø—Ä—è–º–∫—É.\n\n"
        "–•–æ—á–µ–º–æ –Ω–∞–≥–∞–¥–∞—Ç–∏, —â–æ <b>–Ü–Ω–∂–µ–Ω–µ—Ä–Ω–∏–π –Ø—Ä–º–∞—Ä–æ–∫ –ö–∞—Ä‚Äô—î—Ä–∏</b> —Å—Ç–∞–≤ –º–æ–∂–ª–∏–≤–∏–º –∑–∞–≤–¥—è–∫–∏ —Å—Ç—É–¥–µ–Ω—Ç—Å—å–∫—ñ–π –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—ó <b>BEST Lviv</b>. "
        "–ú–∏ —Å—Ç–≤–æ—Ä—é—î–º–æ –π —ñ–Ω—à—ñ –∫—Ä—É—Ç—ñ –ø–æ–¥—ñ—ó, —è–∫—ñ –º–æ–∂—É—Ç—å —Ç–µ–±–µ –∑–∞—Ü—ñ–∫–∞–≤–∏—Ç–∏: \n\n"
        "üü£ <b>BEST Training Week</b> ‚Äì —Ç–∏–∂–¥–µ–Ω—å –ª–µ–∫—Ü—ñ–π –≤—ñ–¥ —Å–ø—ñ–∫–µ—Ä—ñ–≤;\n"
        "üî¥ <b>BEST Capture The Flag</b> ‚Äì –∫–æ–º–∞–Ω–¥–Ω—ñ –∑–º–∞–≥–∞–Ω–Ω—è –∑ –∫—ñ–±–µ—Ä–±–µ–∑–ø–µ–∫–∏;\n"
        "üü† <b>BEST Engineering Competition</b> ‚Äì —ñ–Ω–∂–µ–Ω–µ—Ä–Ω—ñ –∑–º–∞–≥–∞–Ω–Ω—è;\n"
        "üü¢ <b>BEST::HACKath0n</b> ‚Äì 24-–≥–æ–¥–∏–Ω–Ω—ñ IT-–∑–º–∞–≥–∞–Ω–Ω—è;\n"
        "–£—Å—ñ —Ü—ñ –∑–∞—Ö–æ–¥–∏ —î <b>–±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏–º–∏</b>, —Ç–æ–∂ —Å–ª—ñ–¥–∫—É–π –∑–∞ –Ω–∞—à–∏–º–∏ —Å–æ—Ü–º–µ—Ä–µ–∂–∞–º–∏ —Ç–∞ –¥–æ–ª—É—á–∞–π—Å—è –¥–æ —ñ–Ω—à–∏—Ö –ø–æ–¥—ñ–π, —è–∫—ñ –∑–∞—Ü—ñ–∫–∞–≤–∏–ª–∏! üéØ",
        parse_mode="HTML",
        reply_markup=main_menu_kb()
    )
    await state.clear()

@router.callback_query(F.data == "zbir_brodcast")
async def zbir_broadcast_prompt(callback: CallbackQuery):
    confirm_kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –¢–∞–∫, —Ä–æ–∑—ñ—Å–ª–∞—Ç–∏", callback_data="confirm_zbir_broadcast")],
        [InlineKeyboardButton(text="‚ùå –ù—ñ, —Å–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel_zbir_broadcast")]
    ])

    photo_path = "media/zbir.jpg"
    preview_caption = (
        "–Ü–Ω–∂–µ–Ω–µ—Ä–Ω–∏–π –Ø—Ä–º–∞—Ä–æ–∫ –ö–∞—Ä º—î—Ä–∏ –ø—Ä–∏—î–¥–Ω—É—î—Ç—å—Å—è –¥–æ –∑–±–æ—Ä—É <b>–Ω–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫—É –º–µ–¥–∏–∫—ñ–≤ 67 –û–ú–ë.</b>\n\n"
        "–ó–±–∏—Ä–∞—î–º–æ –Ω–∞ –ø—Ä–æ—Ç–∏–¥—Ä–æ–Ω–æ–≤—ñ —Å—ñ—Ç–∫–∏ –¥–ª—è –µ–≤–∞–∫ –∞–≤—Ç–æ –≤ –º–µ–∂–∞—Ö –∑–±–æ—Ä—É –≤—ñ–¥ –ë–§ \"–í–¥—è—á–Ω—ñ\" | BEST Lviv\n\n"
        "üéØ –¶—ñ–ª—å: 15 000 ‚Ç¥\n\n"
        "üîó–ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∑–±—ñ—Ä\nhttps://send.monobank.ua/jar/87vmuFGKQL\n\n"
        "üéÅ–ö–æ–∂–Ω—ñ 50 –≥—Ä–Ω ‚Äì —à–∞–Ω—Å –≤–∏–≥—Ä–∞—Ç–∏ –ø–æ–¥–∞—Ä—É–Ω–æ–∫.\n\n"
        "–ö–æ–∂–µ–Ω –≤–∞—à –¥–æ–Ω–∞—Ç - —Ü–µ —Å–µ—Ä—Ü–µ, —â–æ –±–∏—Ç–∏–º–µ—Ç—å—Å—è –¥–∞–ª—ñ.\n"
        "<span class='tg-spoiler'>–î–æ–ª—É—á–∞–π—Å—è üíô</span>"
    )
    photo = FSInputFile(photo_path)
    await callback.message.answer_photo(
        photo=photo,
        caption=preview_caption,
        parse_mode="HTML",
        reply_markup=confirm_kb
    )

@router.callback_query(F.data == "confirm_zbir_broadcast")
async def confirm_zbir_broadcast(callback: CallbackQuery):
    photo_path = "media/zbir.jpg"
    caption = (
        "–Ü–Ω–∂–µ–Ω–µ—Ä–Ω–∏–π –Ø—Ä–º–∞—Ä–æ–∫ –ö–∞—Ä º—î—Ä–∏ –ø—Ä–∏—î–¥–Ω—É—î—Ç—å—Å—è –¥–æ –∑–±–æ—Ä—É <b>–Ω–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫—É –º–µ–¥–∏–∫—ñ–≤ 67 –û–ú–ë.</b>\n\n"
        "–ó–±–∏—Ä–∞—î–º–æ –Ω–∞ –ø—Ä–æ—Ç–∏–¥—Ä–æ–Ω–æ–≤—ñ —Å—ñ—Ç–∫–∏ –¥–ª—è –µ–≤–∞–∫ –∞–≤—Ç–æ –≤ –º–µ–∂–∞—Ö –∑–±–æ—Ä—É –≤—ñ–¥ –ë–§ \"–í–¥—è—á–Ω—ñ\" | BEST Lviv\n\n"
        "üéØ –¶—ñ–ª—å: 15 000 ‚Ç¥\n\n"
        "üîó–ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∑–±—ñ—Ä\nhttps://send.monobank.ua/jar/87vmuFGKQL\n\n"
        "üéÅ–ö–æ–∂–Ω—ñ 50 –≥—Ä–Ω ‚Äì —à–∞–Ω—Å –≤–∏–≥—Ä–∞—Ç–∏ –ø–æ–¥–∞—Ä—É–Ω–æ–∫.\n\n"
        "–ö–æ–∂–µ–Ω –≤–∞—à –¥–æ–Ω–∞—Ç - —Ü–µ —Å–µ—Ä—Ü–µ, —â–æ –±–∏—Ç–∏–º–µ—Ç—å—Å—è –¥–∞–ª—ñ.\n"
        "<span class='tg-spoiler'>–î–æ–ª—É—á–∞–π—Å—è üíô</span>"
    )

    users_cursor = await get_all_users()
    user_ids = []
    async for user in users_cursor:
        if user.get("registered"):
            user_ids.append(user["telegram_id"])

    success = 0
    fail = 0
    photo = FSInputFile(photo_path)
    for user_id in user_ids:
        try:
            await callback.bot.send_photo(
                chat_id=user_id,
                photo=photo,
                caption=caption,
                parse_mode="HTML"
            )
            success += 1
        except TelegramAPIError as e:
            fail += 1
            print(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –¥–æ {user_id}: {e}")
            await asyncio.sleep(0.05)

    await callback.message.answer(f"‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑—ñ –∑–±–æ—Ä–æ–º —Ä–æ–∑—ñ—Å–ª–∞–Ω–æ!\n–£—Å–ø—ñ—à–Ω–æ: {success}\n–ü–æ–º–∏–ª–∫–∏: {fail}")

@router.callback_query(F.data == "cancel_zbir_broadcast")
async def cancel_zbir_broadcast(callback: CallbackQuery):
    await callback.message.answer("‚ùå –†–æ–∑—Å–∏–ª–∫—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑—ñ –∑–±–æ—Ä–æ–º —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")