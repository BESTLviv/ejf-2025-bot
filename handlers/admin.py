from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from dotenv import load_dotenv
from aiogram.types.input_file import FSInputFile 
import os

from utils.database import get_all_users

load_dotenv()
ADMIN = os.getenv("ADMIN")

router = Router()

class BroadcastStates(StatesGroup):
    enter_broadcast_text = State()
    confirm_broadcast = State()

def admin_inline_kb():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–†–æ–∑—Å–∏–ª–∫–∞ –≤—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º", callback_data="broadcast")],
            [InlineKeyboardButton(text="–û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ CV –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤", callback_data="get_cvs")],
        ]
    )

def confirm_broadcast_kb():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –¢–∞–∫, —Ä–æ–∑—ñ—Å–ª–∞—Ç–∏", callback_data="confirm_broadcast")],
            [InlineKeyboardButton(text="‚ùå –ù—ñ, —Å–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel_broadcast")],
        ]
    )

# --- –•–µ–Ω–¥–ª–µ—Ä–∏ ---
@router.message(F.text == ADMIN)
async def admin_message_handler(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤—ñ—Ç, –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä-–º–æ–ª–æ–¥—á–∏–Ω–∫–∞! –û—Å—å —Ç–≤–æ—ó –æ–ø—Ü—ñ—ó:",
        reply_markup=admin_inline_kb()
    )

@router.callback_query(F.data == "broadcast")
async def broadcast_callback(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏ (–ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è HTML):")
    await state.set_state(BroadcastStates.enter_broadcast_text)

@router.message(BroadcastStates.enter_broadcast_text)
async def enter_broadcast_text(message: types.Message, state: FSMContext):
    text_to_broadcast = message.html_text  
    await state.update_data(broadcast_text=text_to_broadcast)

    await message.answer(
        f"–û—Å—å —Ç–µ–∫—Å—Ç –≤–∞—à–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏:\n\n{text_to_broadcast}\n\n–í–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î—Ç–µ —Ä–æ–∑—Å–∏–ª–∫—É —Ü—å–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º?",
        reply_markup=confirm_broadcast_kb()
    )
    await state.set_state(BroadcastStates.confirm_broadcast)

@router.callback_query(F.data == "confirm_broadcast", BroadcastStates.confirm_broadcast)
async def confirm_broadcast(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    text_to_broadcast = data.get("broadcast_text")

    users_cursor = await get_all_users()
    user_ids = []
    async for user in users_cursor:
        if user.get("registered"):  
            user_ids.append(user["telegram_id"])

    success = 0
    fail = 0
    for user_id in user_ids:
        try:
            await callback.bot.send_message(user_id, text_to_broadcast, parse_mode="HTML")
            success += 1
        except Exception as e:
            fail += 1

    await callback.message.answer(f"–†–æ–∑—Å–∏–ª–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n‚úÖ –£—Å–ø—ñ—à–Ω–æ: {success}\n‚ùå –ü–æ–º–∏–ª–∫–∏: {fail}")
    await state.clear()

@router.callback_query(F.data == "cancel_broadcast", BroadcastStates.confirm_broadcast)
async def cancel_broadcast(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–†–æ–∑—Å–∏–ª–∫—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
    await state.clear()

from utils.database import cv_collection
import os
@router.callback_query(F.data == "get_cvs")
async def get_cvs_callback(callback: CallbackQuery):
    await callback.message.answer("–ó–±–∏—Ä–∞—é –≤—Å—ñ CV –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤...")

    cursor = cv_collection.find({})
    count = 0
    async for cv in cursor:
        user_id = cv.get("user_id")
        cv_text = cv.get("cv_text")
        cv_file_id = cv.get("cv_file_id")  

        if cv_text:
            await callback.message.answer(
                f"<b>–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á ID:</b> <code>{user_id}</code>\n"
                f"<b>–¢–µ–∫—Å—Ç–æ–≤–µ CV:</b>\n{cv_text}",
                parse_mode="HTML"
            )
        else:
            await callback.message.answer(
                f"<b>–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á ID:</b> <code>{user_id}</code>\n"
                f"‚ùå <i>–¢–µ–∫—Å—Ç–æ–≤–æ–≥–æ CV –Ω–µ–º–∞—î</i>",
                parse_mode="HTML"
            )

        if cv_file_id:
            try:
                await callback.message.answer_document(cv_file_id, caption=f"üìÑ PDF CV –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}")
            except Exception as e:
                await callback.message.answer(
                    f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ PDF CV –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}.\n–ü–æ–º–∏–ª–∫–∞: <code>{e}</code>",
                    parse_mode="HTML"
                )
        else:
            await callback.message.answer(
                f"‚ùå PDF CV –≤—ñ–¥—Å—É—Ç–Ω—î –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}.",
                parse_mode="HTML"
            )

        count += 1

    if count == 0:
        await callback.message.answer("‚ùå –ñ–æ–¥–Ω–æ–≥–æ CV –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
    else:
        await callback.message.answer(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ. –û–ø—Ä–∞—Ü—å–æ–≤–∞–Ω–æ {count} CV.")