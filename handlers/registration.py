from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from keyboards.registration_kb import get_course_kb, get_university_kb
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from keyboards.main_menu_kb import main_menu_kb 
from utils.database import save_user_data

router = Router()

class Registration(StatesGroup):
    name = State()
    course = State()
    university = State()
    speciality = State()

@router.message(F.text == "–°—Ç–∞—Ä—Ç üöÄ")
async def start_registration(message: types.Message, state: FSMContext):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–ó–≤—ñ—Å–Ω–æ!")]],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await message.answer(
        "üì¢ –Ü–Ω–∂–µ–Ω–µ—Ä–Ω–∏–π –Ø—Ä–º–∞—Ä–æ–∫ –ö–∞—Ä‚Äô—î—Ä–∏ ‚Äî —Ü–µ –º—ñ—Å—Ü–µ, –¥–µ —Ç–∏ –∑–º–æ–∂–µ—à –ø–æ–∑–Ω–∞–π–æ–º–∏—Ç–∏—Å—è –∑ —Ç–æ–ø–æ–≤–∏–º–∏ –∫–æ–º–ø–∞–Ω—ñ—è–º–∏, –¥—ñ–∑–Ω–∞—Ç–∏—Å—å –ø—Ä–æ –≤–∞–∫–∞–Ω—Å—ñ—ó, –∞ —Ç–∞–∫–æ–∂ –≤–∑—è—Ç–∏ —É—á–∞—Å—Ç—å —É —Ü—ñ–∫–∞–≤–∏—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—è—Ö.\n"
        "–¢–µ–ø–µ—Ä, –ø–æ–∑–Ω–∞–π–æ–º–∏–º–æ—Å—è –±–ª–∏–∂—á–µ!",
        reply_markup=keyboard
    )

@router.message(F.text == "–ó–≤—ñ—Å–Ω–æ!")
async def ask_name(message: types.Message, state: FSMContext):
    await message.answer(
        "–¢–æ–¥—ñ –ø–æ—á–Ω—ñ–º–æ! –ù–∞–ø–∏—à–∏ —Å–≤–æ—î —ñ–º‚Äô—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ —É —Ñ–æ—Ä–º–∞—Ç—ñ:\nüìå–ú–∞–∫—Å–∏–º –°–µ–Ω—å–∫—ñ–≤"
    )
    await state.set_state(Registration.name)

@router.message(Registration.name)
async def validate_name(message: types.Message, state: FSMContext):
    parts = message.text.strip().split()
    if len(parts) < 2:
        await message.answer("‚ö†Ô∏è –°—Ö–æ–∂–µ, —â–æ –¥–∞–Ω—ñ –≤–≤–µ–¥–µ–Ω—ñ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑!")
        return
    await state.update_data(name=message.text)
    await message.answer("–ü—Ä–∏—î–º–Ω–æ –ø–æ–∑–Ω–∞–π–æ–º–∏—Ç–∏—Å—å, {}! –¢–µ–ø–µ—Ä –æ–±–µ—Ä–∏, –Ω–∞ —è–∫–æ–º—É –∫—É—Ä—Å—ñ —Ç–∏ –Ω–∞–≤—á–∞—î—à—Å—è: üìö".format(parts[0]),
                         reply_markup=get_course_kb())
    await state.set_state(Registration.course)

# @router.message(Registration.course)
# async def ask_university(message: types.Message, state: FSMContext):
#     await state.update_data(course=message.text)
    
#     if message.text in ["üîπ –ù–µ –Ω–∞–≤—á–∞—é—Å—å", "üîπ –©–µ —É —à–∫–æ–ª—ñ/–∫–æ–ª–µ–¥–∂—ñ"]:
#         await message.answer("–ß—É–¥–æ–≤–æ, –∞ —è–∫ —â–æ–¥–æ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–æ—Å—Ç—ñ? –ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤—É —Å–≤–æ–≥–æ —Ñ–∞—Ö—É —É —Ñ–æ—Ä–º–∞—Ç—ñ: –°–®–Ü/–Ü–ì–î–ì/–Ü–ë–Ü–°‚Ä¶")
#         await state.set_state(Registration.speciality)
#     else:
#         await message.answer("–ê –≤ —è–∫–æ–º—É —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç—ñ?", reply_markup=get_university_kb())
#         await state.set_state(Registration.university)

# @router.message(Registration.university)
# async def ask_speciality(message: types.Message, state: FSMContext):
#     await state.update_data(university=message.text)
#     await message.answer("–ß—É–¥–æ–≤–æ, –∞ —è–∫ —â–æ–¥–æ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–æ—Å—Ç—ñ? –ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤—É —Å–≤–æ–≥–æ —Ñ–∞—Ö—É —É —Ñ–æ—Ä–º–∞—Ç—ñ: –°–®–Ü/–Ü–ì–î–ì/–Ü–ë–Ü–°‚Ä¶")
#     await state.set_state(Registration.speciality)

@router.message(Registration.course)
async def ask_university_or_finish(message: types.Message, state: FSMContext):
    await state.update_data(course=message.text)
    
    if message.text in ["üîπ –ù–µ –Ω–∞–≤—á–∞—é—Å—å", "üîπ –©–µ —É —à–∫–æ–ª—ñ/–∫–æ–ª–µ–¥–∂—ñ"]:
        data = await state.get_data()
        await save_user_data(
            user_id=message.from_user.id,
            name=data["name"],
            course=data["course"],
            university="–ù–µ –≤–∫–∞–∑–∞–Ω–æ",
            speciality="–ù–µ –≤–∫–∞–∑–∞–Ω–æ"
        )
        await message.answer(
            "–ß—É–¥–æ–≤–æ, —Ç–µ–±–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ. üéâ\n"
            "–ó–∞—Ä–∞–∑ –Ω–∞ –ø–∞–Ω–µ–ª—ñ —Ç–∏ –±–∞—á–∏—à —Ä–æ–∑–¥—ñ–ª–∏ ‚Äì —Ç–∏—Å–Ω–∏ –Ω–∞ –Ω–∏—Ö, —â–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—å –±—ñ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π –ø—Ä–æ –∫–æ–∂–µ–Ω –±–ª–æ–∫ üîé.",
            reply_markup=main_menu_kb()
        )
        await state.clear()
    else:
        await message.answer("–ê –≤ —è–∫–æ–º—É —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç—ñ?", reply_markup=get_university_kb())
        await state.set_state(Registration.university)

@router.message(Registration.university)
async def ask_speciality(message: types.Message, state: FSMContext):
    await state.update_data(university=message.text)
    await message.answer("–ß—É–¥–æ–≤–æ, –∞ —è–∫ —â–æ–¥–æ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–æ—Å—Ç—ñ? –ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤—É —Å–≤–æ–≥–æ —Ñ–∞—Ö—É —É —Ñ–æ—Ä–º–∞—Ç—ñ: –°–®–Ü/–Ü–ì–î–ì/–Ü–ë–Ü–°‚Ä¶")
    await state.set_state(Registration.speciality)

@router.message(Registration.speciality)
async def finish_registration(message: types.Message, state: FSMContext):
    await state.update_data(speciality=message.text)
    data = await state.get_data()

    await save_user_data(
        user_id=message.from_user.id,
        name=data["name"],
        course=data["course"],
        university=data["university"],
        speciality=data["speciality"]
    )
    await message.answer(
        "–ß—É–¥–æ–≤–æ, —Ç–µ–±–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ. üéâ\n"
        "–ó–∞—Ä–∞–∑ –Ω–∞ –ø–∞–Ω–µ–ª—ñ —Ç–∏ –±–∞—á–∏—à —Ä–æ–∑–¥—ñ–ª–∏ ‚Äì —Ç–∏—Å–Ω–∏ –Ω–∞ –Ω–∏—Ö, —â–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—å –±—ñ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π –ø—Ä–æ –∫–æ–∂–µ–Ω –±–ª–æ–∫ üîé.",
         reply_markup=main_menu_kb() 
    )
    await state.clear()
