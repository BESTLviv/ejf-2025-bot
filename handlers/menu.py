from aiogram import Router, types
from aiogram.fsm.context import FSMContext
from aiogram import F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

router = Router()

def main_menu_kb():
    return InlineKeyboardMarkup(
        row_width=2,  
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üìÖ –†–æ–∑–∫–ª–∞–¥", callback_data="schedule"),
                InlineKeyboardButton(text="üìÇ CV", callback_data="cv"),
            ],
            [
                InlineKeyboardButton(text="üéØ –ì—Ä–∞ Share and Win", callback_data="game"),
                InlineKeyboardButton(text="üó£Ô∏è –°–ø—ñ–∫–µ—Ä–∏", callback_data="speakers"),
            ],
            [
                InlineKeyboardButton(text="ü©µüíõ –ü—ñ–¥—Ç—Ä–∏–º–∫–∞ –ó–°–£", callback_data="support_ukraine"),
            ]
        ]
    )

@router.message(F.text == "–°—Ç–∞—Ä—Ç üöÄ")
async def start_registration(message: types.Message, state: FSMContext):
    await message.answer(
        "üì¢ –Ü–Ω–∂–µ–Ω–µ—Ä–Ω–∏–π –Ø—Ä–º–∞—Ä–æ–∫ –ö–∞—Ä‚Äô—î—Ä–∏ ‚Äî —Ü–µ –º—ñ—Å—Ü–µ, –¥–µ —Ç–∏ –∑–º–æ–∂–µ—à –ø–æ–∑–Ω–∞–π–æ–º–∏—Ç–∏—Å—è –∑ —Ç–æ–ø–æ–≤–∏–º–∏ –∫–æ–º–ø–∞–Ω—ñ—è–º–∏, –¥—ñ–∑–Ω–∞—Ç–∏—Å—å –ø—Ä–æ –≤–∞–∫–∞–Ω—Å—ñ—ó, –∞ —Ç–∞–∫–æ–∂ –≤–∑—è—Ç–∏ —É—á–∞—Å—Ç—å —É —Ü—ñ–∫–∞–≤–∏—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—è—Ö.\n"
        "–¢–µ–ø–µ—Ä, –ø–æ–∑–Ω–∞–π–æ–º–∏–º–æ—Å—è –±–ª–∏–∂—á–µ!",
        reply_markup=main_menu_kb() 
    )
    await message.answer(
        "–ó–∞—Ä–∞–∑ –Ω–∞ –ø–∞–Ω–µ–ª—ñ —Ç–∏ –±–∞—á–∏—à —Ä–æ–∑–¥—ñ–ª–∏ ‚Äì —Ç–∏—Å–Ω–∏ –Ω–∞ –Ω–∏—Ö, —â–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—å –±—ñ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π –ø—Ä–æ –∫–æ–∂–µ–Ω –±–ª–æ–∫ üîé.",
        reply_markup=main_menu_kb()
    )


@router.callback_query(F.data == "schedule")
async def show_schedule(callback_query: types.CallbackQuery):
    await callback_query.answer("–¢—É—Ç –±—É–¥–µ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Ä–æ–∑–∫–ª–∞–¥ –ø–æ–¥—ñ–π –Ø—Ä–º–∞—Ä–∫—É. –û—á—ñ–∫—É–π—Ç–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è! üé§")
    await callback_query.message.edit_reply_markup(reply_markup=None)

@router.callback_query(F.data == "cv")
async def show_cv(callback_query: types.CallbackQuery):
    await callback_query.answer("–ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ —Å–≤–æ—î —Ä–µ–∑—é–º–µ –∞–±–æ —Å—Ç–≤–æ—Ä—ñ—Ç—å –π–æ–≥–æ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –±–æ—Ç–∞. –©–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –∑—Ä–æ–±–∏—Ç–∏? üìÑ")
    await callback_query.message.edit_reply_markup(reply_markup=None)

@router.callback_query(F.data == "game")
async def share_and_win(callback_query: types.CallbackQuery):
    await callback_query.answer("–ì—Ä–∞ –¥–ª—è —É—á–∞—Å–Ω–∏–∫—ñ–≤ –Ø—Ä–º–∞—Ä–∫—É: Share and Win! –¢–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—å –±—ñ–ª—å—à–µ! üéâ")
    await callback_query.message.edit_reply_markup(reply_markup=None)

@router.callback_query(F.data == "speakers")
async def show_speakers(callback_query: types.CallbackQuery):
    await callback_query.answer("–¢—É—Ç –±—É–¥–µ —Å–ø–∏—Å–æ–∫ —Å–ø—ñ–∫–µ—Ä—ñ–≤ –Ω–∞ –Ø—Ä–º–∞—Ä–∫—É. –ë–∞–∂–∞—î—Ç–µ –¥—ñ–∑–Ω–∞—Ç–∏—Å—å –±—ñ–ª—å—à–µ –ø—Ä–æ —Å–ø—ñ–∫–µ—Ä—ñ–≤? üë®‚Äçüè´")
    await callback_query.message.edit_reply_markup(reply_markup=None)

@router.callback_query(F.data == "support_ukraine")
async def show_ukraine_support(callback_query: types.CallbackQuery):
    await callback_query.answer("–£ —Ü—å–æ–º—É —Ä–æ–∑–¥—ñ–ª—ñ –±—É–¥–µ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –¥–æ–ø–æ–º–æ–≥—É –ó–°–£. –î–∞–≤–∞–π—Ç–µ —Ä–∞–∑–æ–º –ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –Ω–∞—à–∏—Ö –≥–µ—Ä–æ—ó–≤! üá∫üá¶")
    await callback_query.message.edit_reply_markup(reply_markup=None)

@router.message()
async def handle_unknown_message(message: types.Message):
    await message.answer("–í–∏–±–∞—á—Ç–µ, —è –Ω–µ —Ä–æ–∑—É–º—ñ—é —Ü—å–æ–≥–æ –∑–∞–ø–∏—Ç—É. –°–ø—Ä–æ–±—É–π—Ç–µ –≤–∏–±—Ä–∞—Ç–∏ –æ–¥–∏–Ω –∑ —Ä–æ–∑–¥—ñ–ª—ñ–≤ –º–µ–Ω—é.")
