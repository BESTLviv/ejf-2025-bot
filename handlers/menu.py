from aiogram import Router, types
from aiogram.fsm.context import FSMContext
from aiogram import F
from keyboards.main_menu_kb import main_menu_kb
from aiogram import types, Router 
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import InlineKeyboardButton, CallbackQuery,InputMediaPhoto
from aiogram.types.input_file import FSInputFile
import os
from aiogram.types import InlineKeyboardMarkup, ReplyKeyboardRemove
from utils.database import db 
from aiogram.fsm.state import StatesGroup, State



router = Router()


@router.message(F.text == "–°—Ç–∞—Ä—Ç üöÄ")
async def start_registration(message: types.Message, state: FSMContext):
    await message.answer(
        "üì¢ <b>–Ü–Ω–∂–µ–Ω–µ—Ä–Ω–∏–π –Ø—Ä–º–∞—Ä–æ–∫ –ö–∞—Ä‚Äô—î—Ä–∏</b> ‚Äî —Ü–µ –º—ñ—Å—Ü–µ, –¥–µ —Ç–∏ –∑–º–æ–∂–µ—à –ø–æ–∑–Ω–∞–π–æ–º–∏—Ç–∏—Å—è –∑ —Ç–æ–ø–æ–≤–∏–º–∏ –∫–æ–º–ø–∞–Ω—ñ—è–º–∏, –¥—ñ–∑–Ω–∞—Ç–∏—Å—å –ø—Ä–æ –≤–∞–∫–∞–Ω—Å—ñ—ó, –∞ —Ç–∞–∫–æ–∂ –≤–∑—è—Ç–∏ —É—á–∞—Å—Ç—å —É —Ü—ñ–∫–∞–≤–∏—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—è—Ö.\n"
        "–¢–µ–ø–µ—Ä, –ø–æ–∑–Ω–∞–π–æ–º–∏–º–æ—Å—è –±–ª–∏–∂—á–µ!",
        parse_mode="HTML",
        reply_markup=main_menu_kb() 
    )
    await message.answer(
        "–ó–∞—Ä–∞–∑ –Ω–∞ –ø–∞–Ω–µ–ª—ñ —Ç–∏ –±–∞—á–∏—à <b>—Ä–æ–∑–¥—ñ–ª–∏</b> ‚Äì —Ç–∏—Å–Ω–∏ –Ω–∞ –Ω–∏—Ö, —â–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—å –±—ñ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π –ø—Ä–æ –∫–æ–∂–µ–Ω –±–ª–æ–∫ üîé.",
        parse_mode="HTML",
        reply_markup=main_menu_kb()
    )


from aiogram.types import FSInputFile

@router.message(F.text == "üìÖ  –†–æ–∑–∫–ª–∞–¥")
async def show_schedule(message: types.Message):
    photo_path = "media/schedule.jpg"
    await message.answer_photo(
        photo=FSInputFile(photo_path),
        caption="<b>–ú–∏ —Å—Ç–≤–æ—Ä–∏–ª–∏ <a href='https://calendar.google.com/calendar/u/0?cid=ZDFkN2Y2YWIwYTBhZTdkMGExNTYyMWMxYzFkMWFhMDg1NWE0MzM4ZDA0OTU5NzI0NjVmZDcxNGZlMTY5YzAxY0Bncm91cC5jYWxlbmRhci5nb29nbGUuY29t'>—Ä–æ–∑–∫–ª–∞–¥</a> —Ç–∞–∫, —â–æ–± —Ç–∏ –º—ñ–≥ –ø–æ–≤–Ω—ñ—Å—Ç—é –∑–∞–Ω—É—Ä–∏—Ç–∏—Å—å —É –∫–æ–∂–Ω—É –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å.</b>\n\n"
        "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π —Ü—é –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –Ω–∞ –º–∞–∫—Å–∏–º—É–º, —Ç–∞ –∑ –Ω–µ—Ç–µ—Ä–ø—ñ–Ω–Ω—è–º —á–µ–∫–∞—î–º–æ —Ç–µ–±–µ!\n\n <b>–£—Å—ñ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –±—É–¥—É—Ç—å –ø—Ä–æ—Ö–æ–¥–∏—Ç–∏ –≤ 209 –∞—É–¥. 4 –ù.–ö.</b>",
        parse_mode="HTML"
    )





@router.message(F.text == "üéØ –ì—Ä–∞ Share and Win")
async def share_and_win(message: types.Message):
    await message.answer( "<b>–•–æ—á–µ—à –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –≤—Å—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ —è—Ä–º–∞—Ä–∫—É, –∑–∞–ø–∞–º‚Äô—è—Ç–∞—Ç–∏—Å—å –∫–æ–º–ø–∞–Ω—ñ—è–º —ñ –≤–∏–≥—Ä–∞—Ç–∏ –∫–ª–∞—Å–Ω—ñ –ø—Ä–∏–∑–∏?</b>\n "
        "–¢–æ–¥—ñ –≤–∏–∫–æ–Ω—É–π –∑–∞–≤–¥–∞–Ω–Ω—è –≤ –º–µ–∂–∞—Ö –≥—Ä–∏  ‚ÄúShare and Win‚Äù —Ç–∞ –¥—ñ–ª–∏—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —É Stories! üì∏\n\n"
        "‚åõ<b>–í–∞–∂–ª–∏–≤–æ!</b> –ó–∞–≤–¥–∞–Ω–Ω—è –ø–æ—Ç—Ä—ñ–±–Ω–æ –æ–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ –¥–æ <i>'15:30 29 —Ç—Ä–∞–≤–Ω—è'</i>. –ü—ñ–∑–Ω—ñ—à–µ –≤–æ–Ω–∏ –Ω–µ –±—É–¥—É—Ç—å –∑–∞—Ä–∞—Ö–æ–≤–∞–Ω—ñ.",
        parse_mode="HTML"
    )
    await message.answer( 
    "–ó–∞–≤–¥–∞–Ω–Ω—è Share&Win \n\n"

    "üì∏ <b>–§–æ—Ç–æ —Ç–∞ —Å–æ—Ü—ñ–∞–ª—å–Ω—ñ –º–µ—Ä–µ–∂—ñ:</b>\n"
    "üîπ –í—ñ–¥–≤—ñ–¥–∞–π —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤ –≤—ñ–¥ <i>PWC Lviv SDC</i> —ñ –≤–∏–∫–ª–∞–¥–∏ —Ñ–æ—Ç–æ –∑ –ø–æ–∑–Ω–∞—á–∫–∞–º–∏ @pwc_lviv_sdc —Ç–∞ @best_lviv\n"
    "üîπ –ó—Ä–æ–±–∏ –∑–Ω—ñ–º–æ–∫ –∑ —Ä–æ–±–æ—Ç–æ–º –≤—ñ–¥ <i>Leoni</i> —ñ –ø–æ–¥—ñ–ª–∏—Å—å —É —Å–æ—Ü–º–µ—Ä–µ–∂–∞—Ö\n"
    "üîπ –°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—É–π—Å—è –±—ñ–ª—è —Ñ–æ—Ç–æ–∑–æ–Ω–∏ <i>Ukrsibbank</i> —ñ –≤—ñ–¥–º—ñ—Ç—å @ukrsibbank\n\n"

    "üß† <b>–ü–µ—Ä–µ–≤—ñ—Ä —Å–≤–æ—ó –∑–Ω–∞–Ω–Ω—è:</b>\n"
    "üîπ –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π –Ω–∞ –ø–∏—Ç–∞–Ω–Ω—è –≤—ñ–¥ <i>Kevych Solutions</i>\n"
    "üîπ –ó—ñ–≥—Ä–∞—î–º–æ –≤ —ñ–Ω—Ç–µ–ª–µ–∫—Ç—É–∞–ª—å–Ω—É –≥—Ä—É –∑ <i>KPMG</i> ‚Äì –¥–∞–π –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ —ó—Ö –∑–∞–ø–∏—Ç–∞–Ω–Ω—è\n"
    "üîπ –ó–≥–∞–¥–∞–π —É—Å–µ, —â–æ –∑–Ω–∞—î—à, ‚Äì –∑–∞–≤–¥–∞–Ω–Ω—è –≤—ñ–¥ <i>Renesas</i>\n"
    "üîπ –ü–æ–∫–∞–∂–∏ —Å–µ–±–µ —É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –ø–∏—Ç–∞–Ω–Ω—è –≤—ñ–¥ <i>Coxit</i>\n"
    "üîπ Challenge accepted: –ø–∏—Ç–∞–Ω–Ω—è –≤—ñ–¥ <i>Lifesaver</i>\n"
    "üîπ –ù–µ –∑–∞–±—É–¥—å –≤–∏–∫–æ–Ω–∞—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è –≤—ñ–¥ <i>Coax</i>\n\n"

    "üß© <b>–Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–∏ —Ç–∞ —Ä–æ–∑–≤–∏—Ç–æ–∫:</b>\n"
    "üîπ –í—ñ–∑—å–º–∏ —É—á–∞—Å—Ç—å —É –≤–µ—Å–µ–ª–æ–º—É ‚Äú–ó–Ω–∞–π–¥–∏ —Å–≤—ñ–π soft skill‚Äù –≤—ñ–¥ <i>Clario Tech</i>\n"
    "üîπ –ü—Ä–æ–π–¥–∏ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è –∞–±–æ kahoot –≤—ñ–¥ <i>GlobalLogic</i>\n"
    "üîπ –ó–∞–≤—ñ—Ç–∞–π –Ω–∞ –≤–æ—Ä–∫—à–æ–ø –≤—ñ–¥ <i>Infineon</i> ‚Äî –≥–∞—Ä–∞–Ω—Ç–æ–≤–∞–Ω–æ –Ω–æ–≤—ñ –∑–Ω–∞–Ω–Ω—è!\n",
    
    parse_mode="HTML"
)

    

@router.message(F.text == "üë• –ß–∞—Ç –∑ —É—á–∞—Å–Ω–∏–∫–∞–º–∏") # –ø—Ä–∏–±—Ä–∞–≤ —Ñ–æ—Ç–∫—É 
async def chat_with_participants(message: types.Message):
    await message.answer(
        "<b>–î–æ—î–¥–Ω—É–π—Å—è –¥–æ –Ω–∞—à–æ—ó —Å–ø—ñ–ª—å–Ω–æ—Ç–∏ —Ç–∞  –¥—ñ–ª–∏—Å—è –≤—Ä–∞–∂–µ–Ω–Ω—è–º–∏ –∑ —ñ–Ω—à–∏–º–∏  —É—á–∞—Å–Ω–∏–∫–∞–º–∏</b>\n\n–î–ª—è —Ü—å–æ–≥–æ –ø–µ—Ä–µ–π–¥–∏ –∑–∞ —Ü–∏–º –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º üëâ <b><a href='https://t.me/+-TS86G4tcoY0NTky'>–¢–∏–∫</a></b>",
        parse_mode="HTML"
    )




@router.message(F.text == "–Ø —î–±–ª–∞–Ω")
async def chat_with_participants(message: types.Message):
    await message.answer("–Ø –∑–Ω–∞—é")



file_ids = {} 

speakers = [
    {
        "name": "–î–µ–Ω–∏—Å –ë—ñ–≥—É—Å",
        "photo_path": "media/bihus.png",
        "description": "üîπ –ñ—É—Ä–Ω–∞–ª—ñ—Å—Ç-—Ä–æ–∑—Å–ª—ñ–¥—É–≤–∞—á, –∑–∞—Å–Ω–æ–≤–Ω–∏–∫ Bihus\n\nüîπ –°–æ–ª—å–Ω–∏–π –≤–∏—Å—Ç—É–ø ¬´–Ø–∫ –≤–∏–∫—Ä–∏–≤–∞—Ç–∏ –∫–æ—Ä—É–ø—Ü—ñ—é —Ç–∞ –∑–∞–ª–∏—à–∞—Ç–∏—Å—å –≤ –∂–∏–≤–∏—Ö¬ª",
        "key": "bihus"
    },
    {
        "name": "–í–∞–ª–µ–Ω—Ç–∏–Ω –ö—Ä–∞—Å–Ω–æ–ø–ª—å–æ—Ä–æ–≤",
        "photo_path": "media/kapitalist.png",
        "description": "üîπ –ó–∞—Å–Ω–æ–≤–Ω–∏–∫ –Ω–∞–π–≤—ñ–¥–æ–º—ñ—à–æ–≥–æ –µ–∫–æ–Ω–æ–º—ñ—á–Ω–æ–≥–æ YouTube –∫–∞–Ω–∞–ª—É ¬´–û—Å—Ç–∞–Ω–Ω—ñ–π –∫–∞–ø—ñ—Ç–∞–ª—ñ—Å—Ç¬ª\n\nüîπ –§—ñ–Ω–∞–Ω—Å–æ–≤–∞ –≥—Ä–∞–º–æ—Ç–Ω—ñ—Å—Ç—å. –ß–∏–º —Ä–∞–Ω—ñ—à–µ –∑—Ä–æ–∑—É–º—ñ—î—à, —Ç–∏–º –±—ñ–ª—å—à–µ —à–∞–Ω—Å—ñ–≤ —Å—Ç–∞—Ç–∏ –±–∞–≥–∞—Ç–∏–º –≤ –∂–∏—Ç—Ç—ñ",
        "key": "kapitalist"
    },
     {
        "name": "–ù–∞–∑–∞—Ä –¢–∏–º–æ—à–∏–∫",
        "photo_path": "media/tymoshyk.JPG",
        "description": "üîπ –ó–∞—Å–Ω–æ–≤–Ω–∏–∫ –∫–æ–º–ø–∞–Ω—ñ—ó UnderDefence\n\nüîπ –ü–∞–Ω–µ–ª—å–Ω–∞ –¥–∏—Å–∫—É—Å—ñ—è ¬´–©–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–Ω–∞—Ç–∏ –ø–µ—Ä–µ–¥ —Ç–∏–º, —è–∫ —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –≤–ª–∞—Å–Ω–∏–π –ø—Ä–æ–¥—É–∫—Ç/–∫–æ–º–ø–∞–Ω—ñ—é¬ª",
        "key": "tymoshyk"
    },
    {
        "name": "–í–æ–ª–æ–¥–∏–º–∏—Ä –ù–∞–∑–∞—Ä–∫–µ–≤–∏—á",
        "photo_path": "media/kevych.png",
        "description": "üîπ –ó–∞—Å–Ω–æ–≤–Ω–∏–∫ —ñ –≥–µ–Ω–µ—Ä–∞–ª—å–Ω–∏–π –¥–∏—Ä–µ–∫—Ç–æ—Ä —É Kevych Solutions\n\nüîπ –ü–∞–Ω–µ–ª—å–Ω–∞ –¥–∏—Å–∫—É—Å—ñ—è ¬´–©–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–Ω–∞—Ç–∏ –ø–µ—Ä–µ–¥ —Ç–∏–º, —è–∫ —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –≤–ª–∞—Å–Ω–∏–π –ø—Ä–æ–¥—É–∫—Ç/–∫–æ–º–ø–∞–Ω—ñ—é¬ª",
        "key": "kevych"
    },
    {
        "name": "–í—ñ—Ç–∞–ª—ñ–π –Ø–∫—É—à–µ–≤",
        "photo_path": "media/yakushev.png",
        "description": "üîπ –ì–µ–Ω–µ—Ä–∞–ª—å–Ω–∏–π –¥–∏—Ä–µ–∫—Ç–æ—Ä 10GUards\n\nüîπ –ü–∞–Ω–µ–ª—å–Ω–∞ –¥–∏—Å–∫—É—Å—ñ—è ¬´–©–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–Ω–∞—Ç–∏ –ø–µ—Ä–µ–¥ —Ç–∏–º, —è–∫ —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –≤–ª–∞—Å–Ω–∏–π –ø—Ä–æ–¥—É–∫—Ç/–∫–æ–º–ø–∞–Ω—ñ—é¬ª",
        "key": "yakushev"
    },
    {
        "name": "–ù–∞—Ç–∞–ª—ñ—è –®–∞—Ö–æ–≤—Å—å–∫–∞",
        "photo_path": "media/shakhovska.jpg",
        "description": "üîπ –†–µ–∫—Ç–æ—Ä –ù–∞—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ–≥–æ —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç—É ¬´–õ—å–≤—ñ–≤—Å—å–∫–∞ –ø–æ–ª—ñ—Ç–µ—Ö–Ω—ñ–∫–∞¬ª\n\nüîπ –ü–∞–Ω–µ–ª—å–Ω–∞ –¥–∏—Å–∫—É—Å—ñ—è ¬´–†–æ–±–æ—Ç–∞ –ø—ñ—Å–ª—è —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç—É: —á–æ–≥–æ –Ω–µ –≤–∏—Å—Ç–∞—á–∞—î –≤–∏–ø—É—Å–∫–Ω–∏–∫–∞–º?¬ª",
        "key": "shakhovska"
    },
    {
        "name": "–Ü–Ω–Ω–∞ –®—É–ª—å–≥—ñ–Ω–∞",
        "photo_path": "media/shulhina.jpg",
        "description": "üîπ Lead Recruirer –≤ Sombra\n\nüîπ –ü–∞–Ω–µ–ª—å–Ω–∞ –¥–∏—Å–∫—É—Å—ñ—è ¬´–†–æ–±–æ—Ç–∞ –ø—ñ—Å–ª—è —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç—É: —á–æ–≥–æ –Ω–µ –≤–∏—Å—Ç–∞—á–∞—î –≤–∏–ø—É—Å–∫–Ω–∏–∫–∞–º?¬ª",
        "key": "shulhina"
    },
    {
        "name": "–ê–Ω–¥—Ä—ñ–π –ë–æ–π—á—É–∫",
        "photo_path": "media/boichuk.jpg",
        "description": "üîπ Head of AI, –≤–∏–∫–ª–∞–¥–∞—á –∫–∞—Ñ–µ–¥—Ä–∏ –°–®–Ü\n\nüîπ –ü–∞–Ω–µ–ª—å–Ω–∞ –¥–∏—Å–∫—É—Å—ñ—è ¬´–†–æ–±–æ—Ç–∞ –ø—ñ—Å–ª—è —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç—É: —á–æ–≥–æ –Ω–µ –≤–∏—Å—Ç–∞—á–∞—î –≤–∏–ø—É—Å–∫–Ω–∏–∫–∞–º?¬ª",
        "key": "boichuk"
    },
    {
        "name": "–ê–Ω–Ω–∞ –°–µ—Ä–≥—ñ–π—á—É–∫",
        "photo_path": "media/serhiichuk.jpg",
        "description": "üîπ Talent Acquisition Partner –∑ –±—ñ–ª—å—à —è–∫ 7-—Ä—ñ—á–Ω–∏–º –¥–æ—Å–≤—ñ–¥–æ–º —É —Ä–µ–∫—Ä—É—Ç–∏–Ω–≥—É (–≤ —Ç–æ–º—É —á–∏—Å–ª—ñ –ø—Ä–æ–¥—É–∫—Ç–æ–≤–∏—Ö –∫–æ–º–ø–∞–Ω—ñ—è—Ö Ajax Systems, SKELAR)\n\nüîπ –ü–∞–Ω–µ–ª—å–Ω–∞ –¥–∏—Å–∫—É—Å—ñ—è ¬´–†–æ–±–æ—Ç–∞ –ø—ñ—Å–ª—è —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç—É: —á–æ–≥–æ –Ω–µ –≤–∏—Å—Ç–∞—á–∞—î –≤–∏–ø—É—Å–∫–Ω–∏–∫–∞–º?¬ª",
        "key": "serhiichuk"
    },
    {
        "name": "–ê–Ω–¥—Ä—ñ–π –°–µ—Ä–≥—ñ–π—á—É–∫",
        "photo_path": "media/andrewkha.png",
        "description": "üîπ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä\n\nüîπ HR Generalist —É Kevych Solutions\n\nüîπ–ü–∞–Ω–µ–ª—å–Ω–∞ –¥–∏—Å–∫—É—Å—ñ—è ¬´–†–æ–±–æ—Ç–∞ –ø—ñ—Å–ª—è —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç—É: —á–æ–≥–æ –Ω–µ –≤–∏—Å—Ç–∞—á–∞—î –≤–∏–ø—É—Å–∫–Ω–∏–∫–∞–º?¬ª",
        "key": "andrewkha"
    }
]

def build_speaker_keyboard(selected_index: int):
    kb = InlineKeyboardBuilder()
    for i, speaker in enumerate(speakers):
        name = speaker["name"]
        if i == selected_index:
            text = f"‚ñ∂Ô∏è{name}‚óÄÔ∏è"
        else:
            text = name
        kb.add(InlineKeyboardButton(text=text, callback_data=f"select_speaker:{i}"))
    return kb.adjust(1).as_markup()

@router.message(F.text == "üó£Ô∏è –°–ø—ñ–∫–µ—Ä–∏") # –ø—Ä–∏–±—Ä–∞–≤ —Ñ–æ—Ç–∫—É —Å–ø—ñ–∫–µ—Ä—ñ–≤ 
async def show_speakers(message: types.Message):
    await message.answer("<b>–ù–∞–π—Ü—ñ–Ω–Ω—ñ—à–µ, —â–æ –º–æ–∂–Ω–∞ –∑—Ä–æ–±–∏—Ç–∏ –∑ –Ω–∞–±—É—Ç–∏–º–∏ –∑–Ω–∞–Ω–Ω—è–º–∏ ‚Äî —Ü–µ –∑–∞—Å—Ç–æ—Å–æ–≤—É–≤–∞—Ç–∏ —ó—Ö —ñ –¥—ñ–ª–∏—Ç–∏—Å—è –∑ —ñ–Ω—à–∏–º–∏.</b> –ù–∞—à—ñ —Å–ø—ñ–∫–µ—Ä–∏ –≥–æ—Ç–æ–≤—ñ –ø–µ—Ä–µ–¥–∞—Ç–∏ —Å–≤–æ—é –º—É–¥—Ä—ñ—Å—Ç—å, —Ç–æ–∂ –ø—Ä–∏–π–º–∞–π —ó—ó —Ç–∞ —Ä–æ–∑—à–∏—Ä—é–π –≥–æ—Ä–∏–∑–æ–Ω—Ç–∏!",
                               parse_mode="HTML"
    )
    selected_index = 0
    speaker = speakers[selected_index]
    photo = FSInputFile(speaker["photo_path"])
    keyboard = build_speaker_keyboard(selected_index)

    msg = await message.answer_photo(
        photo=photo,
        caption=f"<b>{speaker['name']}</b>\n\n{speaker['description']}",
        reply_markup=keyboard,
        parse_mode="HTML"
    )

    file_ids[speaker["key"]] = msg.photo[-1].file_id

@router.callback_query(F.data.startswith("select_speaker:"))
async def select_speaker(callback: CallbackQuery):
    selected_index = int(callback.data.split(":")[1])
    speaker = speakers[selected_index]
    keyboard = build_speaker_keyboard(selected_index)

    file_id = file_ids.get(speaker["key"])
    if not file_id:
        file = FSInputFile(speaker["photo_path"])
        msg = await callback.message.answer_photo(
            photo=file,
            caption=f"<b>{speaker['name']}</b>\n\n{speaker['description']}",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        file_ids[speaker["key"]] = msg.photo[-1].file_id
        await callback.message.delete()
    else:
        media = InputMediaPhoto(
            media=file_id,
            caption=f"<b>{speaker['name']}</b>\n\n{speaker['description']}" ,
            parse_mode="HTML"
        )
        await callback.message.edit_media(media=media, reply_markup=keyboard)

    await callback.answer()

@router.message(F.text == "ü©µüíõ –ü—ñ–¥—Ç—Ä–∏–º–∫–∞ –ó–°–£")
async def show_ukraine_support(message: types.Message):
    await message.answer(
        "<b>–ó–∞–≤–¥—è–∫–∏ –Ω–∞—à–∏–º –≤—ñ–π—Å—å–∫–æ–≤–∏–º –º–∏ –º–æ–∂–µ–º–æ –æ—Ä–≥–∞–Ω—ñ–∑–æ–≤—É–≤–∞—Ç–∏ –Ü–Ω–∂–µ–Ω–µ—Ä–Ω–∏–π –Ø—Ä–º–∞—Ä–æ–∫ –ö–∞—Ä‚Äô—î—Ä–∏.</b>\n\n"
        "–¢–µ–ø–µ—Ä –Ω–∞—à —á–∞—Å –≤—ñ–¥–¥—è—á–∏—Ç–∏ —ó–º ‚Äì –¥–æ–ª—É—á–∞–π—Å—è –¥–æ <b>–∑–±–æ—Ä—É</b> üëá",
        parse_mode="HTML"
    )

    photo_path = "media/zbir.jpg"
    caption = (
        "–Ü–Ω–∂–µ–Ω–µ—Ä–Ω–∏–π –Ø—Ä–º–∞—Ä–æ–∫ –ö–∞—Ä º—î—Ä–∏ –ø—Ä–∏—î–¥–Ω—É—î—Ç—å—Å—è –¥–æ –∑–±–æ—Ä—É <b>–Ω–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫—É –º–µ–¥–∏–∫—ñ–≤ 67 –û–ú–ë.</b>\n\n"
        "–ó–±–∏—Ä–∞—î–º–æ –Ω–∞ –ø—Ä–æ—Ç–∏–¥—Ä–æ–Ω–æ–≤—ñ —Å—ñ—Ç–∫–∏ –¥–ª—è –µ–≤–∞–∫ –∞–≤—Ç–æ –≤ –º–µ–∂–∞—Ö –∑–±–æ—Ä—É –≤—ñ–¥ –ë–§ \"–í–¥—è—á–Ω—ñ\" | BEST Lviv\n\n"
        "üéØ –¶—ñ–ª—å: 15 000 ‚Ç¥\n\n"
        "üîó–ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∑–±—ñ—Ä\nhttps://send.monobank.ua/jar/87vmuFGKQL\n\n"
        "üéÅ–ö–æ–∂–Ω—ñ 50 –≥—Ä–Ω ‚Äì —à–∞–Ω—Å –≤–∏–≥—Ä–∞—Ç–∏ –ø–æ–¥–∞—Ä—É–Ω–æ–∫.\n\n"
        "–ö–æ–∂–µ–Ω –≤–∞—à –¥–æ–Ω–∞—Ç - —Ü–µ —Å–µ—Ä—Ü–µ, —â–æ –±–∏—Ç–∏–º–µ—Ç—å—Å—è –¥–∞–ª—ñ.\n"
        "<span class='tg-spoiler'>–î–æ–ª—É—á–∞–π—Å—è üíô</span>"
    )
    photo = FSInputFile(photo_path)
    await message.answer_photo(
        photo=photo,
        caption=caption,
        parse_mode="HTML"
    )

def rating_keyboard():
    keyboard = [
        [InlineKeyboardButton(text="‚≠ê 1 ‚Äì –ù–µ —Å–ø–æ–¥–æ–±–∞–ª–æ—Å—å", callback_data="rate_1")],
        [InlineKeyboardButton(text="‚≠ê 2 ‚Äì –ú–æ–≥–ª–æ –±—É—Ç–∏ –∫—Ä–∞—â–µ", callback_data="rate_2")],
        [InlineKeyboardButton(text="‚≠ê 3 ‚Äì –ë—É–ª–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ", callback_data="rate_3")],
        [InlineKeyboardButton(text="‚≠ê 4 ‚Äì –ë—É–ª–æ –∫—Ä—É—Ç–æ!", callback_data="rate_4")],
        [InlineKeyboardButton(text="‚≠ê 5 ‚Äì –ù–µ–π–º–æ–≤—ñ—Ä–Ω–æ, —á–µ–∫–∞—é –Ω–∞—Å—Ç—É–ø–Ω–∏–π –Ü–Ø–ö!", callback_data="rate_5")],
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


@router.message(F.text == "üí¨ –í—ñ–¥–≥—É–∫–∏ –ø–æ–¥—ñ—ó")
async def ask_for_feedbacks(message: types.Message):
    await message.answer("üí¨ –ó–∞–ª–∏—à–∏—Ç–∏ –≤—ñ–¥–≥—É–∫ –º–æ–∂–Ω–∞ –±—É–¥–µ –≤ –¥—Ä—É–≥–∏–π <b>–¥–µ–Ω—å –Ø—Ä–º–∞—Ä–∫—É</b>, 29 —Ç—Ä–∞–≤–Ω—è.\n–ü–æ–≤–µ—Ä—Ç–∞–π—Å—è –¥–æ —Ü—ñ—î—ó –∫–Ω–æ–ø–∫–∏ —Ç—Ä–æ—Ö–∏ –∑–≥–æ–¥–æ–º ‚Äî –Ω–∞–º –¥—É–∂–µ –≤–∞–∂–ª–∏–≤–∞ —Ç–≤–æ—è –¥—É–º–∫–∞!",
                         parse_mode="HTML")

# class FeedbackStates(StatesGroup):# –≤—Å—ñ —à—Ç—É–∫–∏ –∑ —Ñ—ñ–¥–±–µ–∫–∞–º–∏
#     waiting_for_comment = State()
# @router.message(F.text == "üí¨ –í—ñ–¥–≥—É–∫–∏ –ø–æ–¥—ñ—ó")
# async def start_feedback(message: types.Message, state: FSMContext):
#     await state.clear()  # –û—á–∏—Å—Ç–∏—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ —Å—Ç–∞–Ω–∏ –Ω–∞ –≤—Å—è–∫–∏–π –≤–∏–ø–∞–¥–æ–∫
#     await message.answer(
#         "–¶–µ –±—É–ª–∏ –¥–≤–∞ –Ω–µ–π–º–æ–≤—ñ—Ä–Ω—ñ –¥–Ω—ñ! –ú–∏ –Ω–∞–º–∞–≥–∞–ª–∏—Å—è –∑—Ä–æ–±–∏—Ç–∏ <b>–Ü–Ω–∂–µ–Ω–µ—Ä–Ω–∏–π –Ø—Ä–º–∞—Ä–æ–∫ –ö–∞—Ä º—î—Ä–∏</b> —è–∫–æ–º–æ–≥–∞ –∫–æ—Ä–∏—Å–Ω—ñ—à–∏–º —ñ —Ü—ñ–∫–∞–≤–∏–º –¥–ª—è —Ç–µ–±–µ. –ê —Ç–µ–ø–µ—Ä —Ç–≤–æ—è —á–µ—Ä–≥–∞ –¥–æ–ø–æ–º–æ–≥—Ç–∏ –Ω–∞–º —Å—Ç–∞—Ç–∏ –∫—Ä–∞—â–∏–º–∏! –û—Ü—ñ–Ω–∏, –±—É–¥—å –ª–∞—Å–∫–∞, –∑–∞—Ö—ñ–¥ –≤—ñ–¥ 1 –¥–æ 5 üìä.",
#         parse_mode="HTML",
#         reply_markup=rating_keyboard()
#     )
# @router.callback_query(F.data.startswith("rate_"))
# async def handle_rating(callback: CallbackQuery, state: FSMContext):
#     rating = int(callback.data.split("_")[1])
#     await state.update_data(rating=rating)

#     await callback.message.edit_text(
#         "üôè –î—è–∫—É—î–º–æ –∑–∞ –æ—Ü—ñ–Ω–∫—É!\n–ù–∞–º –¥—É–∂–µ –≤–∞–∂–ª–∏–≤–æ –ø–æ—á—É—Ç–∏ —Ç–≤–æ—é –¥—É–º–∫—É. –ù–∞–ø–∏—à–∏, —â–æ —Ç–æ–±—ñ —Å–ø–æ–¥–æ–±–∞–ª–æ—Å—å, –∞ —â–æ –º–æ–∂–Ω–∞ –ø–æ–∫—Ä–∞—â–∏—Ç–∏ ‚Äì –∞–¥–∂–µ —Å–∞–º–µ —Ç–≤—ñ–π –≤—ñ–¥–≥—É–∫ —Å–ø–æ–Ω—É–∫–∞—î –Ω–∞—Å –¥–æ —Ä–æ–∑–≤–∏—Ç–∫—É!",
#         parse_mode="HTML",
#         reply_markup=None
#     )
#     await state.set_state(FeedbackStates.waiting_for_comment)
# @router.message(FeedbackStates.waiting_for_comment)
# async def save_feedback(message: types.Message, state: FSMContext):
#     user_id = message.from_user.id
#     comment = message.text
#     data = await state.get_data()
#     rating = data.get('rating')

#     feedback_collection = db["feedbacks"]
#     await feedback_collection.update_one(
#         {"telegram_id": user_id},
#         {"$set": {
#             "telegram_id": user_id,
#             "rating": rating,
#             "comment": comment
#         }},
#         upsert=True
#     )

#     await message.answer(
#         "–î—É–∂–µ –¥—è–∫—É—î–º–æ! –¢–≤–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –¥–æ–ø–æ–º–æ–∂—É—Ç—å –Ω–∞–º —Ä—É—Ö–∞—Ç–∏—Å—è —É –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É –Ω–∞–ø—Ä—è–º–∫—É.\n\n"
#         "–•–æ—á–µ–º–æ –Ω–∞–≥–∞–¥–∞—Ç–∏, —â–æ <b>–Ü–Ω–∂–µ–Ω–µ—Ä–Ω–∏–π –Ø—Ä–º–∞—Ä–æ–∫ –ö–∞—Ä‚Äô—î—Ä–∏</b> —Å—Ç–∞–≤ –º–æ–∂–ª–∏–≤–∏–º –∑–∞–≤–¥—è–∫–∏ —Å—Ç—É–¥–µ–Ω—Ç—Å—å–∫—ñ–π –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—ó <b>BEST Lviv</b>. –ú–∏ —Å—Ç–≤–æ—Ä—é—î–º–æ –π —ñ–Ω—à—ñ –∫—Ä—É—Ç—ñ –ø–æ–¥—ñ—ó, —è–∫—ñ –º–æ–∂—É—Ç—å —Ç–µ–±–µ –∑–∞—Ü—ñ–∫–∞–≤–∏—Ç–∏:\n\n"
#         "üü£ <b>BEST Training Week</b> ‚Äì —Ç–∏–∂–¥–µ–Ω—å –ª–µ–∫—Ü—ñ–π –≤—ñ–¥ —Å–ø—ñ–∫–µ—Ä—ñ–≤;\n"
#         "üî¥ <b>BEST Capture The Flag</b> ‚Äì –∫–æ–º–∞–Ω–¥–Ω—ñ –∑–º–∞–≥–∞–Ω–Ω—è –∑ –∫—ñ–±–µ—Ä–±–µ–∑–ø–µ–∫–∏;\n"
#         "üü† <b>BEST Engineering Competition</b> ‚Äì —ñ–Ω–∂–µ–Ω–µ—Ä–Ω—ñ –∑–º–∞–≥–∞–Ω–Ω—è;\n"
#         "üü¢ <b>BEST::HACKath0n</b> ‚Äì 24-–≥–æ–¥–∏–Ω–Ω—ñ IT-–∑–º–∞–≥–∞–Ω–Ω—è;\n"
#         "–£—Å—ñ —Ü—ñ –∑–∞—Ö–æ–¥–∏ —î <b>–±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏–º–∏</b>, —Ç–æ–∂ —Å–ª—ñ–¥–∫—É–π –∑–∞ –Ω–∞—à–∏–º–∏ —Å–æ—Ü–º–µ—Ä–µ–∂–∞–º–∏ —Ç–∞ –¥–æ–ª—É—á–∞–π—Å—è –¥–æ —ñ–Ω—à–∏—Ö –ø–æ–¥—ñ–π, —è–∫—ñ –∑–∞—Ü—ñ–∫–∞–≤–∏–ª–∏! üéØ",
#         parse_mode="HTML",
#         reply_markup=main_menu_kb()
#     )
#     await state.clear()
